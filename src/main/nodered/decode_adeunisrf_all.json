[
    {
        "id": "64bafdf1.35e0d4",
        "type": "function",
        "z": "b23a6a86.69b218",
        "name": "Decode Adeunis All",
        "func": "\n\n/**\n *              _                  _     \n *     /\\      | |                (_)    \n *    /  \\   __| | ___ _   _ _ __  _ ___ \n *   / /\\ \\ / _` |/ _ \\ | | | '_ \\| / __|\n *  / ____ \\ (_| |  __/ |_| | | | | \\__ \\\n * /_/    \\_\\__,_|\\___|\\__,_|_| |_|_|___/\n *                                       \n * \n * JavaScript/Node.js library of Adeunis codecs v1.1.1\n * Supported products: [COMFORT, DRY CONTACTS, MOTION, PULSE, Pulse 3, TEMP, Temp 3, REPEATER, DELTA P]\n * \n * This source code is provided \"as-is\" and with no warranties. Adeunis is not responsible for its use.\n * \n */\n\n\n\"use strict\";\nvar codec;\n(function (codec) {\n    /**\n     * Decoder class.\n     *\n     * Main class for decoding purposes.\n     * Contains declaration of all required parsers and decode() method (API entry point).\n     *\n     * See below for explanations on parsers.\n     */\n\tvar Decoder = /** @class */ (function () {\n        /**\n         * Constructor\n         * @param options option object\n         *   option.codecStorage: implementation of CodecStorage to use for external storage, leave blank if unknown\n         */\n\t\tfunction Decoder(options) {\n            /**\n             * Parsers declaration.\n             *\n             * Array of parser implementations that can be used by the library.\n             *\n             * Parsers are specific handlers for parsing frame of a device type and a frame code.\n             */\n\t\t\tthis.parsers = [\n\t\t\t\t// Generic parsers not used for REPEATER\n\t\t\t\tnew codec.GenericStatusByteParser(),\n\t\t\t\tnew codec.Generic0x10Parser(),\n\t\t\t\tnew codec.Generic0x20Parser(),\n\t\t\t\tnew codec.Generic0x2fParser(),\n\t\t\t\tnew codec.Generic0x30Parser(),\n\t\t\t\tnew codec.Generic0x33Parser(),\n\t\t\t\t// DC product\n\t\t\t\tnew codec.Dc0x10Parser(),\n\t\t\t\tnew codec.Dc0x30Parser(),\n\t\t\t\tnew codec.Dc0x40Parser(),\n\t\t\t\t// PULSE product\n\t\t\t\tnew codec.Pulse0x10Parser(),\n\t\t\t\tnew codec.Pulse0x11Parser(),\n\t\t\t\tnew codec.Pulse0x12Parser(),\n\t\t\t\tnew codec.Pulse0x30Parser(),\n\t\t\t\tnew codec.Pulse0x46Parser(),\n\t\t\t\tnew codec.Pulse0x47Parser(),\n\t\t\t\tnew codec.Pulse0x48Parser(),\n\t\t\t\t// Pulse 3 product\n\t\t\t\tnew codec.PulseV3StatusByteParser(),\n\t\t\t\tnew codec.PulseV30x10Parser(),\n\t\t\t\tnew codec.PulseV30x11Parser(),\n\t\t\t\tnew codec.PulseV30x12Parser(),\n\t\t\t\tnew codec.PulseV30x30Parser(),\n\t\t\t\tnew codec.PulseV30x46Parser(),\n\t\t\t\tnew codec.PulseV30x47Parser(),\n\t\t\t\tnew codec.PulseV30x5aParser(),\n\t\t\t\tnew codec.PulseV30x5bParser(),\n\t\t\t\t// TEMP product\n\t\t\t\tnew codec.TempStatusByteParser(),\n\t\t\t\tnew codec.Temp0x10Parser(),\n\t\t\t\tnew codec.Temp0x11Parser(),\n\t\t\t\tnew codec.Temp0x12Parser(),\n\t\t\t\tnew codec.Temp0x30Parser(),\n\t\t\t\tnew codec.Temp0x43Parser(),\n\t\t\t\t// Temp 3 product\n\t\t\t\tnew codec.TempV3StatusByteParser(),\n\t\t\t\tnew codec.TempV30x10Parser(),\n\t\t\t\tnew codec.TempV30x30Parser(),\n\t\t\t\tnew codec.TempV30x57Parser(),\n\t\t\t\tnew codec.TempV30x58Parser(),\n\t\t\t\t// COMFORT product\n\t\t\t\tnew codec.ComfortStatusByteParser(),\n\t\t\t\tnew codec.Sb0x1fParser(),\n\t\t\t\tnew codec.Sb0x51Parser(),\n\t\t\t\tnew codec.Sb0x52Parser(),\n\t\t\t\tnew codec.Comfort0x1fParser(),\n\t\t\t\tnew codec.Comfort0x10Parser(),\n\t\t\t\tnew codec.Comfort0x4cParser(),\n\t\t\t\tnew codec.Comfort0x4dParser(),\n\t\t\t\tnew codec.Comfort0x30Parser(),\n\t\t\t\tnew codec.Comfort0x51Parser(),\n\t\t\t\tnew codec.Comfort0x52Parser(),\n\t\t\t\t// MOTION produc\n\t\t\t\t// new Sb0x1fParser(),\n\t\t\t\t// new Sb0x51Parser(),\n\t\t\t\t// new Sb0x52Parser(),\n\t\t\t\tnew codec.MotionStatusByteParser(),\n\t\t\t\tnew codec.Motion0x1fParser(),\n\t\t\t\tnew codec.Motion0x10Parser(),\n\t\t\t\tnew codec.Motion0x30Parser(),\n\t\t\t\tnew codec.Motion0x4eParser(),\n\t\t\t\tnew codec.Motion0x4fParser(),\n\t\t\t\tnew codec.Motion0x50Parser(),\n\t\t\t\tnew codec.Motion0x51Parser(),\n\t\t\t\tnew codec.Motion0x52Parser(),\n\t\t\t\t// REPEARER product\n\t\t\t\tnew codec.Repeater0x01Parser(),\n\t\t\t\tnew codec.Repeater0x02Parser(),\n\t\t\t\tnew codec.Repeater0x03Parser(),\n\t\t\t\tnew codec.Repeater0x04Parser(),\n\t\t\t\t// DELTAP product\n\t\t\t\t// new Sb0x1fParser(),\n\t\t\t\t// new Sb0x51Parser(),\n\t\t\t\t// new Sb0x52Parser(),\n\t\t\t\tnew codec.DeltapStatusByteParser(),\n\t\t\t\tnew codec.Deltap0x1fParser(),\n\t\t\t\tnew codec.Deltap0x10Parser(),\n\t\t\t\tnew codec.Deltap0x11Parser(),\n\t\t\t\tnew codec.Deltap0x30Parser(),\n\t\t\t\tnew codec.Deltap0x51Parser(),\n\t\t\t\tnew codec.Deltap0x52Parser(),\n\t\t\t\tnew codec.Deltap0x53Parser(),\n\t\t\t\tnew codec.Deltap0x54Parser(),\n\t\t\t\tnew codec.Deltap0x55Parser(),\n\t\t\t\tnew codec.Deltap0x56Parser(),\n\t\t\t];\n\t\t\tif (options && options.codecStorage) {\n\t\t\t\t// External storage: Node-RED...\n\t\t\t\tthis.codecStorage = options.codecStorage;\n\t\t\t}\n\t\t\telse if (typeof localStorage !== 'undefined') {\n\t\t\t\t// Local storage: browser\n\t\t\t\tthis.codecStorage = localStorage;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Default (JS object)\n\t\t\t\tthis.codecStorage = new codec.InternalCodecStorage();\n\t\t\t}\n\t\t\t// TODO: check parsers uniqueness\n\t\t}\n        /**\n         * Get supported device types and frame codes.\n         *\n         * The returned pairs are available for decoding.\n         */\n\t\tDecoder.prototype.getSupported = function () {\n\t\t\treturn this.parsers\n\t\t\t\t.map(function (p) {\n\t\t\t\t\treturn ({\n\t\t\t\t\t\tdeviceType: p.deviceType,\n\t\t\t\t\t\tframeCode: p.frameCode\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t};\n        /**\n         * Find device types\n         * @param payloadString payload as hexadecimal string\n         */\n\t\tDecoder.prototype.findDeviceTypes = function (payloadString) {\n\t\t\t// Check arguments\n\t\t\tif (!/^(?:[0-9a-f]{2}){2,}$/gi.test(payloadString)) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\t// Get buffer and frame code\n\t\t\tvar payload = Buffer.from(payloadString, 'hex');\n\t\t\tvar frameCode = payload[0];\n\t\t\tvar deviceTypesFull = this.parsers\n\t\t\t\t.filter(function (p) { return p.frameCode === frameCode; })\n\t\t\t\t.map(function (p) { return p.deviceType; });\n\t\t\treturn Array.from(new Set(deviceTypesFull));\n\t\t};\n        /**\n         * Decode given payload.\n         *\n         * Configuration frames with 0x10 frame code are persisted and reinjected in parsers. Pass these frames first\n         * to enable device-specific decoding.\n         * Example (Dry Contacts):\n         *   Decoder.decode('100001016705464602'); // This frame indicates that channel 1 is configured as output\n         *   Decoder.decode('4040000100000000000001'); // While decoding this data frame, channel 1 is treated as output\n         *\n         * @param payloadString payload as hexadecimal string\n         * @param devId device ID: LoRa device EUI or Sigfox ID, leave blank if unknown\n         * @param network network: lora868 or sigfox\n         * @returns decoded data as JSON object\n         */\n\t\tDecoder.prototype.decode = function (payloadString, devId, network) {\n\t\t\tif (devId === void 0) { devId = 'tmpDevId'; }\n\t\t\tif (network === void 0) { network = 'unknown'; }\n\t\t\t// Check arguments\n\t\t\tif (!/^(?:[0-9a-f]{2}){2,}$/gi.test(payloadString)) {\n\t\t\t\treturn { type: 'Invalid' };\n\t\t\t}\n\t\t\t// Get buffer and frame code\n\t\t\tvar payload = Buffer.from(payloadString, 'hex');\n\t\t\tvar frameCode = payload[0];\n\t\t\t// Handle device type\n\t\t\tvar deviceType;\n\t\t\tdeviceType = this.storeDeviceType(frameCode, devId);\n\t\t\tif (!deviceType) {\n\t\t\t\tdeviceType = this.fetchDeviceType(devId);\n\t\t\t}\n\t\t\t// Handle configuration\n\t\t\tvar configuration;\n\t\t\tif (frameCode === 0x10) {\n\t\t\t\tconfiguration = payload;\n\t\t\t\tthis.storeConfiguration(configuration, devId);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconfiguration = this.fetchConfiguration(devId);\n\t\t\t}\n\t\t\t// Handle specific parsing\n\t\t\tvar activeParsers = this.getActiveParsers(deviceType, frameCode);\n\t\t\tvar partialContents = activeParsers.map(function (p) {\n\t\t\t\tvar partialContent;\n\t\t\t\ttry {\n\t\t\t\t\tpartialContent = p.parseFrame(payload, configuration, network, deviceType);\n\t\t\t\t}\n\t\t\t\tcatch (error) {\n\t\t\t\t\tpartialContent = { 'error': error.toString() };\n\t\t\t\t}\n\t\t\t\treturn partialContent;\n\t\t\t});\n\t\t\t// Handle unsupported\n\t\t\tif (activeParsers.every(function (p) { return p.frameCode < 0; })) {\n\t\t\t\tpartialContents.push({ type: 'Unsupported' });\n\t\t\t}\n\t\t\t// Merge partial contents\n\t\t\tvar content = Object.assign.apply(Object, [{}].concat(partialContents));\n\t\t\t// Put 'type' at first position\n\t\t\tvar typestr = content['type'];\n\t\t\tdelete content['type'];\n\t\t\tcontent = Object.assign({ type: typestr }, content);\n\t\t\treturn content;\n\t\t};\n        /**\n         * Set device type for given device ID.\n         *\n         * Gives additional information to the library to provide better decoding.\n         * The library can also guess device type from passed frames in decode() method. Use this method when the frame\n         * to decode does not refer to a single device type (example: 0x10 frames).\n         *\n         * @param deviceType device type, must be a value from getSupported() method\n         * @param devId device ID: LoRa device EUI or Sigfox ID\n         */\n\t\tDecoder.prototype.setDeviceType = function (deviceType, devId) {\n\t\t\tif (devId === void 0) { devId = 'tmpDevId'; }\n\t\t\tthis.codecStorage.setItem(devId + \".deviceType\", deviceType);\n\t\t};\n        /**\n         * Clear stored data for a device ID:\n         *   - Device type\n         *   - Configuration\n         * @param devId device ID: LoRa device EUI or Sigfox ID, leave blank if unknown\n         */\n\t\tDecoder.prototype.clearStoredData = function (devId) {\n\t\t\tvar _this = this;\n\t\t\tif (!devId) {\n\t\t\t\tdevId = 'tmpDevId';\n\t\t\t}\n\t\t\t['deviceType', 'configuration']\n\t\t\t\t.map(function (suffix) { return devId + \".\" + suffix; })\n\t\t\t\t.forEach(function (key) { return _this.codecStorage.removeItem(key); });\n\t\t};\n        /**\n         * Fetch configuration frame\n         * @param devId device ID\n         */\n\t\tDecoder.prototype.fetchConfiguration = function (devId) {\n\t\t\tif (!devId) {\n\t\t\t\treturn Buffer.from('');\n\t\t\t}\n\t\t\tvar value = this.codecStorage.getItem(devId + \".configuration\");\n\t\t\treturn Buffer.from(value || '', 'hex');\n\t\t};\n        /**\n         * Store configuration frame\n         * @param payload payload\n         * @param devId device ID\n         */\n\t\tDecoder.prototype.storeConfiguration = function (payload, devId) {\n\t\t\tif (!devId) {\n\t\t\t\treturn payload;\n\t\t\t}\n\t\t\tthis.codecStorage.setItem(devId + \".configuration\", payload.toString('hex'));\n\t\t\treturn payload;\n\t\t};\n        /**\n         * Fetch device type\n         * @param devId device ID\n         */\n\t\tDecoder.prototype.fetchDeviceType = function (devId) {\n\t\t\tif (!devId) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn this.codecStorage.getItem(devId + \".deviceType\") || '';\n\t\t};\n        /**\n         * Store device type\n         * @param frameCode frame code\n         * @param devId device ID\n         */\n\t\tDecoder.prototype.storeDeviceType = function (frameCode, devId) {\n\t\t\tvar deviceType = '';\n\t\t\tif (!devId) {\n\t\t\t\treturn deviceType;\n\t\t\t}\n\t\t\tvar matchingParsers = this.parsers.filter(function (p) { return p.deviceType !== 'any' && p.frameCode === frameCode; });\n\t\t\tif (matchingParsers.length === 1) {\n\t\t\t\tdeviceType = matchingParsers[0].deviceType;\n\t\t\t\tthis.codecStorage.setItem(devId + \".deviceType\", deviceType);\n\t\t\t}\n\t\t\treturn deviceType;\n\t\t};\n        /**\n         * Get active parsers\n         * @param deviceType device type\n         * @param frameCode frame code\n         */\n\t\tDecoder.prototype.getActiveParsers = function (deviceType, frameCode) {\n\t\t\tvar activeParsers = [];\n\t\t\tif (deviceType) {\n\t\t\t\tif (deviceType !== 'repeater') {\n\t\t\t\t\t// Get parsers for any device types or any frame codes\n\t\t\t\t\tvar genericParsers = this.parsers.filter(function (p) {\n\t\t\t\t\t\treturn p.deviceType === 'any' &&\n\t\t\t\t\t\t\t(p.frameCode < 0 || p.frameCode === frameCode);\n\t\t\t\t\t});\n\t\t\t\t\tactiveParsers = activeParsers.concat(genericParsers);\n\t\t\t\t}\n\t\t\t\t// Device type is known, get parsers for given device type AND frame code\n\t\t\t\tvar selectedParsers = this.parsers.filter(function (p) {\n\t\t\t\t\treturn p.deviceType === deviceType &&\n\t\t\t\t\t\t(p.frameCode < 0 || p.frameCode === frameCode);\n\t\t\t\t});\n\t\t\t\tactiveParsers = activeParsers.concat(selectedParsers);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Get parsers for any device types or any frame codes\n\t\t\t\tactiveParsers = this.parsers.filter(function (p) {\n\t\t\t\t\treturn p.deviceType === 'any' &&\n\t\t\t\t\t\t(p.frameCode < 0 || p.frameCode === frameCode);\n\t\t\t\t});\n\t\t\t\t// Device type is not known, get parsers for the frame code IF all matches the same device type\n\t\t\t\tvar selectedParsers = this.parsers.filter(function (p) { return p.frameCode === frameCode; });\n\t\t\t\tif (selectedParsers.length > 0) {\n\t\t\t\t\tvar guessedDeviceType_1 = selectedParsers[0].deviceType;\n\t\t\t\t\tif (selectedParsers.every(function (p) { return p.deviceType === guessedDeviceType_1; })) {\n\t\t\t\t\t\tactiveParsers = activeParsers.concat(selectedParsers);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Return active parser\n\t\t\treturn activeParsers;\n\t\t};\n\t\treturn Decoder;\n\t}());\n\tcodec.Decoder = Decoder;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Encoder class.\n     *\n     * Main class for encoding purposes.\n     * Contains declaration of all required builders and encode() method (API entry point).\n     *\n     * See below for explanations on builders.\n     */\n\tvar Encoder = /** @class */ (function () {\n\t\tfunction Encoder() {\n            /**\n             * Builders declaration.\n             *\n             * Array of builder implementations that can be used by the library.\n             *\n             * Builders are specific handlers for encoding frame of a device type and a frame code.\n             */\n\t\t\tthis.builders = [\n\t\t\t\tnew codec.Dc0x10Builder(),\n\t\t\t\tnew codec.Pulse0x10Builder(),\n\t\t\t\tnew codec.Repeater0x01Builder(),\n\t\t\t\tnew codec.Repeater0x02Builder(),\n\t\t\t\tnew codec.Repeater0x03Builder(),\n\t\t\t\tnew codec.Repeater0x04Builder(),\n\t\t\t\tnew codec.Repeater0x05Builder()\n\t\t\t];\n\t\t}\n        /**\n         * Get supported device types and frame codes.\n         *\n         * The returned pairs are available for encoding.\n         */\n\t\tEncoder.prototype.getSupported = function () {\n\t\t\treturn this.builders\n\t\t\t\t.map(function (p) {\n\t\t\t\t\treturn ({\n\t\t\t\t\t\tdeviceType: p.deviceType,\n\t\t\t\t\t\tframeCode: p.frameCode\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t};\n        /**\n         * Get input data types.\n         * @param deviceType device type\n         * @param frameCode frame code\n         * @returns a map of available input data and associated types\n         */\n\t\tEncoder.prototype.getInputDataTypes = function (deviceType, frameCode) {\n\t\t\tvar builder = this.builders.find(function (b) { return b.deviceType === deviceType && b.frameCode === frameCode; });\n\t\t\tif (!builder) {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t\tvar inputdataTypes = {};\n\t\t\tvar inputData = new builder.inputDataClass();\n\t\t\tfor (var key in inputData) {\n\t\t\t\tif (inputData.hasOwnProperty(key)) {\n\t\t\t\t\tinputdataTypes[key] = typeof inputData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn inputdataTypes;\n\t\t};\n        /**\n         * Encode given arguments.\n         *\n         * Generates a string payload from given arguments. Data object members and associated types can be known using\n         * getInputDataTypes() method.\n         *\n         * @param deviceType device type\n         * @param frameCode frame code\n         * @param network network: lora868 or sigfox\n         * @param data data object: map of available input data and values\n         * @returns encoded data as string\n         */\n\t\tEncoder.prototype.encode = function (deviceType, frameCode, network, data) {\n\t\t\tif (network === void 0) { network = 'unknown'; }\n\t\t\tvar builder = this.builders.find(function (b) { return b.deviceType === deviceType && b.frameCode === frameCode; });\n\t\t\tif (!builder) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tvar payload = builder.buildFrame(data || new builder.inputDataClass(), network);\n\t\t\treturn payload.toString('hex');\n\t\t};\n\t\treturn Encoder;\n\t}());\n\tcodec.Encoder = Encoder;\n})(codec || (codec = {}));\n// CommonJS\nif (typeof module !== 'undefined') {\n\tmodule.exports = codec;\n}\n// Test (Mocha)\nif (typeof process !== 'undefined' && process.env.NODE_ENV === 'test') {\n\tglobal.codec = codec;\n}\nvar codec;\n(function (codec) {\n    /**\n     * Internal codec storage\n     */\n\tvar InternalCodecStorage = /** @class */ (function () {\n\t\tfunction InternalCodecStorage() {\n\t\t\tthis.store = {};\n\t\t}\n\t\tInternalCodecStorage.prototype.getItem = function (key) {\n\t\t\treturn this.store[key];\n\t\t};\n\t\tInternalCodecStorage.prototype.removeItem = function (key) {\n\t\t\tdelete this.store[key];\n\t\t};\n\t\tInternalCodecStorage.prototype.setItem = function (key, value) {\n\t\t\tthis.store[key] = value;\n\t\t};\n\t\treturn InternalCodecStorage;\n\t}());\n\tcodec.InternalCodecStorage = InternalCodecStorage;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Comfort 0x10 (configuration) frame parser\n     */\n\tvar Comfort0x10Parser = /** @class */ (function () {\n\t\tfunction Comfort0x10Parser() {\n\t\t\tthis.deviceType = 'comfort';\n\t\t\tthis.frameCode = 0x10;\n\t\t}\n\t\tComfort0x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\t// register 300: Emission period of the life frame\n\t\t\t// register 301: Issue period, value betwenn 0 and 65535, 0: disabling periodic transmission\n\t\t\t// register 320: value betwenn 1 and 65535\n\t\t\t// register 321: value betwenn 0 and 65535, 0: no scanning, X2s\n\t\t\t// reading_frequency = S321 * S320\n\t\t\t// sending_frequency = S321 * S320 * S301\n\t\t\tvar appContent = {\n\t\t\t\ttype: '0x10 Comfort configuration',\n\t\t\t\t'transmission_period_keep_alive_sec': payload.readUInt16BE(2) * 10,\n\t\t\t\t'number_of_historization_before_sending': payload.readUInt16BE(4),\n\t\t\t\t'number_of_sampling_before_historization': payload.readUInt16BE(6),\n\t\t\t\t'sampling_period_sec': payload.readUInt16BE(8) * 2,\n\t\t\t\t'calculated_period_recording_sec': payload.readUInt16BE(8) * payload.readUInt16BE(6) * 2,\n\t\t\t\t'calculated_period_sending_sec': payload.readUInt16BE(8) * payload.readUInt16BE(6) * payload.readUInt16BE(4) * 2\n\t\t\t};\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Comfort0x10Parser;\n\t}());\n\tcodec.Comfort0x10Parser = Comfort0x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Comfort 0x1f (TOR configuration) frame parser\n     */\n\tvar Comfort0x1fParser = /** @class */ (function () {\n\t\tfunction Comfort0x1fParser() {\n\t\t\tthis.deviceType = 'comfort';\n\t\t\tthis.frameCode = 0x1f;\n\t\t\tthis.sb0x1fParser = new codec.Sb0x1fParser();\n\t\t}\n\t\tComfort0x1fParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.sb0x1fParser.parseFrame(payload, configuration, network);\n\t\t\tappContent['type'] = '0x1f Comfort channels configuration';\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Comfort0x1fParser;\n\t}());\n\tcodec.Comfort0x1fParser = Comfort0x1fParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Comfort 0x30 (keep alive) frame parser\n     */\n\tvar Comfort0x30Parser = /** @class */ (function () {\n\t\tfunction Comfort0x30Parser() {\n\t\t\tthis.deviceType = 'comfort';\n\t\t\tthis.frameCode = 0x30;\n\t\t\tthis.generic0x30Parser = new codec.Generic0x30Parser();\n\t\t}\n\t\tComfort0x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.generic0x30Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['configuration_inconsistency'] = ((payload[1] & 0x08) !== 0) ? true : false;\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Comfort0x30Parser;\n\t}());\n\tcodec.Comfort0x30Parser = Comfort0x30Parser;\n})(codec || (codec = {}));\nvar __assign = (this && this.__assign) || function () {\n\t__assign = Object.assign || function (t) {\n\t\tfor (var s, i = 1, n = arguments.length; i < n; i++) {\n\t\t\ts = arguments[i];\n\t\t\tfor (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n\t\t\t\tt[p] = s[p];\n\t\t}\n\t\treturn t;\n\t};\n\treturn __assign.apply(this, arguments);\n};\nvar codec;\n(function (codec) {\n    /**\n     * Comfort 0x4c (historic data) frame parser\n     */\n\tvar Comfort0x4cParser = /** @class */ (function () {\n\t\tfunction Comfort0x4cParser() {\n\t\t\tthis.deviceType = 'comfort';\n\t\t\tthis.frameCode = 0x4c;\n\t\t}\n\t\tComfort0x4cParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x4c Comfort data', 'instantaneous_temperature_celsius_degrees': payload.readInt16BE(2) / 10, 'humidity_current_percentage': payload.readUInt8(4) }, this.getHistoricDataFromPayload(payload, configuration));\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get historic data from payload\n         * @param payload payload\n         * @param configuration configuration\n         */\n\t\tComfort0x4cParser.prototype.getHistoricDataFromPayload = function (payload, configuration) {\n\t\t\tvar appContent = {};\n\t\t\t// Loop through historic data (if present)\n\t\t\tfor (var offset = 5; offset < payload.byteLength; offset += 3) {\n\t\t\t\tvar index = (offset - 2) / 3;\n\t\t\t\tvar timeText = this.getTimeText(index);\n\t\t\t\tappContent[\"temperature_\" + timeText + \"_celsius_degrees\"] = payload.readInt16BE(offset) / 10;\n\t\t\t\tappContent[\"humidity_\" + timeText + \"_percentage\"] = payload[offset + 2];\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get reading frequency\n         * @param configuration configuration\n         */\n\t\tComfort0x4cParser.prototype.getReadingFrequency = function (configuration) {\n\t\t\treturn configuration.byteLength > 0 ? configuration.readUInt16BE(8) * configuration.readUInt16BE(6) * 2 : null;\n\t\t};\n        /**\n         * Get time text\n         * @param readingFrequency reading frequency\n         * @param index index\n         */\n\t\tComfort0x4cParser.prototype.getTimeText = function (index) {\n\t\t\tvar time = \"tminus\" + index;\n\t\t\treturn time;\n\t\t};\n\t\treturn Comfort0x4cParser;\n\t}());\n\tcodec.Comfort0x4cParser = Comfort0x4cParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Comfort 0x4d (alarm) frame parser\n     */\n\tvar Comfort0x4dParser = /** @class */ (function () {\n\t\tfunction Comfort0x4dParser() {\n\t\t\tthis.deviceType = 'comfort';\n\t\t\tthis.frameCode = 0x4d;\n\t\t}\n\t\tComfort0x4dParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x4d Comfort alarm' }, this.getDataFromPayload(payload));\n\t\t\treturn appContent;\n\t\t};\n\t\tComfort0x4dParser.prototype.getDataFromPayload = function (payload) {\n\t\t\tvar appContent = {};\n\t\t\t// Bit 4: alarm temp state (0: inactive, 1: active)\n\t\t\tappContent['alarm_status_temperature'] = payload.readUInt8(2) >> 4 & 1;\n\t\t\t// Bit 0: alarm humidity state (0: inactive, 1:active)\n\t\t\tappContent['alarm_status_humidity'] = payload.readUInt8(2) >> 0 & 1;\n\t\t\t// Temp value (en dixième de degrès)\n\t\t\tappContent['temperature_celsius_degrees'] = payload.readInt16BE(3) / 10;\n\t\t\t// Humidity value (%)\n\t\t\tappContent['humidity_percentage'] = payload.readUInt8(5);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Comfort0x4dParser;\n\t}());\n\tcodec.Comfort0x4dParser = Comfort0x4dParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Comfort 0x51 (TOR configuration) frame parser\n     */\n\tvar Comfort0x51Parser = /** @class */ (function () {\n\t\tfunction Comfort0x51Parser() {\n\t\t\tthis.deviceType = 'comfort';\n\t\t\tthis.frameCode = 0x51;\n\t\t\tthis.sb0x51Parser = new codec.Sb0x51Parser();\n\t\t}\n\t\tComfort0x51Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.sb0x51Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['type'] = '0x51 Comfort TOR1 alarm';\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Comfort0x51Parser;\n\t}());\n\tcodec.Comfort0x51Parser = Comfort0x51Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Comfort 0x52 (TOR configuration) frame parser\n     */\n\tvar Comfort0x52Parser = /** @class */ (function () {\n\t\tfunction Comfort0x52Parser() {\n\t\t\tthis.deviceType = 'comfort';\n\t\t\tthis.frameCode = 0x52;\n\t\t\tthis.sb0x52Parser = new codec.Sb0x52Parser();\n\t\t}\n\t\tComfort0x52Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.sb0x52Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['type'] = '0x52 Comfort TOR2 alarm';\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Comfort0x52Parser;\n\t}());\n\tcodec.Comfort0x52Parser = Comfort0x52Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Comfort status byte parser\n     */\n\tvar ComfortStatusByteParser = /** @class */ (function () {\n\t\tfunction ComfortStatusByteParser() {\n\t\t\tthis.deviceType = 'comfort';\n\t\t\tthis.frameCode = -1;\n\t\t}\n\t\tComfortStatusByteParser.prototype.parseFrame = function (payload, configuration) {\n\t\t\tvar statusContent = {};\n\t\t\t// Status byte, applicative flags\n\t\t\tstatusContent['configuration_inconsistency'] = ((payload[1] & 0x08) !== 0) ? true : false;\n\t\t\treturn statusContent;\n\t\t};\n\t\treturn ComfortStatusByteParser;\n\t}());\n\tcodec.ComfortStatusByteParser = ComfortStatusByteParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Dry Contacts 0x10 (configuration) input data\n     */\n\tvar Dc0x10InputData = /** @class */ (function () {\n\t\tfunction Dc0x10InputData() {\n\t\t\tthis.channel1Output = false;\n\t\t\tthis.channel2Output = false;\n\t\t\tthis.channel3Output = false;\n\t\t\tthis.channel4Output = false;\n\t\t}\n\t\treturn Dc0x10InputData;\n\t}());\n\tcodec.Dc0x10InputData = Dc0x10InputData;\n    /**\n     * Dry Contacts 0x10 (configuration) frame builder\n     */\n\tvar Dc0x10Builder = /** @class */ (function () {\n\t\tfunction Dc0x10Builder() {\n\t\t\tthis.deviceType = 'dc';\n\t\t\tthis.frameCode = 0x10;\n\t\t\tthis.inputDataClass = Dc0x10InputData;\n\t\t}\n\t\tDc0x10Builder.prototype.buildFrame = function (inputData, network) {\n\t\t\tvar payload = Buffer.alloc(9);\n\t\t\tpayload[0] = this.frameCode;\n\t\t\t// Channel configuration\n\t\t\tpayload[4] = inputData.channel1Output ? 0x07 : 0x01;\n\t\t\tpayload[5] = inputData.channel2Output ? 0x07 : 0x01;\n\t\t\tpayload[6] = inputData.channel3Output ? 0x07 : 0x01;\n\t\t\tpayload[7] = inputData.channel4Output ? 0x07 : 0x01;\n\t\t\treturn payload;\n\t\t};\n\t\treturn Dc0x10Builder;\n\t}());\n\tcodec.Dc0x10Builder = Dc0x10Builder;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Dry Contacts 0x10 (configuration) frame parser\n     */\n\tvar Dc0x10Parser = /** @class */ (function () {\n\t\tfunction Dc0x10Parser() {\n\t\t\tthis.deviceType = 'dc';\n\t\t\tthis.frameCode = 0x10;\n\t\t}\n\t\tDc0x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x10 Dry Contacts configuration' };\n\t\t\tif (payload[8] === 2) {\n\t\t\t\t// TEST mode => period = value * 20sec\n\t\t\t\tappContent['transmission_period_keep_alive_sec'] = payload[2] * 20;\n\t\t\t\tappContent['transmission_period_event_counters_sec'] = payload[3] * 20;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// PRODUCTION mode => period = value * 10min\n\t\t\t\tappContent['transmission_period_keep_alive_min'] = payload[2] * 10;\n\t\t\t\tappContent['transmission_period_event_counters_min'] = payload[3] * 10;\n\t\t\t}\n\t\t\t// Channel x configuration\n\t\t\t// payload[y]<3:0> => type\n\t\t\t// payload[y]<7:4> => waiting period duration\n\t\t\t// Channel A configuration\n\t\t\tappContent['channelA_type'] = this.getTypeText(payload[4] & 0x0f);\n\t\t\tappContent['channelA_waiting_period_duration'] = this.getWaitingPeriodDurationText((payload[4] & 0xf0) >> 4);\n\t\t\t// Channel B configuration\n\t\t\tappContent['channelB_type'] = this.getTypeText(payload[5] & 0x0f);\n\t\t\tappContent['channelB_waiting_period_duration'] = this.getWaitingPeriodDurationText((payload[5] & 0xf0) >> 4);\n\t\t\t// Channel C configuration\n\t\t\tappContent['channelC_type'] = this.getTypeText(payload[6] & 0x0f);\n\t\t\tappContent['channelC_waiting_period_duration'] = this.getWaitingPeriodDurationText((payload[6] & 0xf0) >> 4);\n\t\t\t// Channel D configuration\n\t\t\tappContent['channelD_type'] = this.getTypeText(payload[7] & 0x0f);\n\t\t\tappContent['channelD_waiting_period_duration'] = this.getWaitingPeriodDurationText((payload[7] & 0xf0) >> 4);\n\t\t\t// Product mode\n\t\t\tappContent['product_mode'] = codec.PlateformCommonUtils.getProductModeText(payload[8]);\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get Type text\n         * @param value value\n         */\n\t\tDc0x10Parser.prototype.getTypeText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn 'disabled';\n\t\t\t\tcase 1:\n\t\t\t\t\treturn 'in_periodic_mode_high_edge';\n\t\t\t\tcase 2:\n\t\t\t\t\treturn 'in_periodic_mode_low_edge';\n\t\t\t\tcase 3:\n\t\t\t\t\treturn 'in_periodic_mode_high_and_low_edge';\n\t\t\t\tcase 4:\n\t\t\t\t\treturn 'in_event_mode_high_edge';\n\t\t\t\tcase 5:\n\t\t\t\t\treturn 'in_event_mode_low_edge';\n\t\t\t\tcase 6:\n\t\t\t\t\treturn 'in_event_mode_high_and_low_edge';\n\t\t\t\tcase 7:\n\t\t\t\t\treturn 'out_default_state_1close';\n\t\t\t\tcase 8:\n\t\t\t\t\treturn 'out_default_state_0open';\n\t\t\t\tdefault:\n\t\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n        /**\n         * Get Waiting Period Duration text\n         * @param value value\n         */\n\t\tDc0x10Parser.prototype.getWaitingPeriodDurationText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn 'no_debounce';\n\t\t\t\tcase 1:\n\t\t\t\t\treturn '10msec';\n\t\t\t\tcase 2:\n\t\t\t\t\treturn '20msec';\n\t\t\t\tcase 3:\n\t\t\t\t\treturn '50msec';\n\t\t\t\tcase 4:\n\t\t\t\t\treturn '100msec';\n\t\t\t\tcase 5:\n\t\t\t\t\treturn '200msec';\n\t\t\t\tcase 6:\n\t\t\t\t\treturn '500msec';\n\t\t\t\tcase 7:\n\t\t\t\t\treturn '1sec';\n\t\t\t\tcase 8:\n\t\t\t\t\treturn '2sec';\n\t\t\t\tcase 9:\n\t\t\t\t\treturn '5sec';\n\t\t\t\tcase 10:\n\t\t\t\t\treturn '10sec';\n\t\t\t\tcase 11:\n\t\t\t\t\treturn '20sec';\n\t\t\t\tcase 12:\n\t\t\t\t\treturn '40sec';\n\t\t\t\tcase 13:\n\t\t\t\t\treturn '60sec';\n\t\t\t\tcase 14:\n\t\t\t\t\treturn '5min';\n\t\t\t\tdefault:\n\t\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n\t\treturn Dc0x10Parser;\n\t}());\n\tcodec.Dc0x10Parser = Dc0x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Dry Contacts 0x30 (keep alive) frame parser\n     */\n\tvar Dc0x30Parser = /** @class */ (function () {\n\t\tfunction Dc0x30Parser() {\n\t\t\tthis.deviceType = 'dc';\n\t\t\tthis.frameCode = 0x30;\n\t\t\tthis.generic0x30Parser = new codec.Generic0x30Parser();\n\t\t}\n\t\tDc0x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.generic0x30Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['command_output_done'] = ((payload[1] & 0x08) !== 0) ? true : false;\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Dc0x30Parser;\n\t}());\n\tcodec.Dc0x30Parser = Dc0x30Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Dry Contacts 0x40 (data) frame parser\n     */\n\tvar Dc0x40Parser = /** @class */ (function () {\n\t\tfunction Dc0x40Parser() {\n\t\t\tthis.deviceType = 'dc';\n\t\t\tthis.frameCode = 0x40;\n\t\t}\n\t\tDc0x40Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x40 Dry Contacts data' };\n\t\t\t// Channel A states\n\t\t\tvar channelAType = configuration[4] & 0x0f;\n\t\t\tif (channelAType !== 0x07 && channelAType !== 0x08) {\n\t\t\t\t// Channel A type is output\n\t\t\t\tappContent['channelA_event_counter'] = payload.readUInt16BE(2);\n\t\t\t}\n\t\t\tappContent['channelA_current_state'] = Boolean(payload[10] & 0x01);\n\t\t\tappContent['channelA_previous_frame_state'] = Boolean(payload[10] & 0x02);\n\t\t\t// Channel B states\n\t\t\tvar channelBType = configuration[5] & 0x0f;\n\t\t\tif (channelBType !== 0x07 && channelBType !== 0x08) {\n\t\t\t\t// Channel B type is output\n\t\t\t\tappContent['channelB_event_counter'] = payload.readUInt16BE(4);\n\t\t\t}\n\t\t\tappContent['channelB_current_state'] = Boolean(payload[10] & 0x04);\n\t\t\tappContent['channelB_previous_frame_state'] = Boolean(payload[10] & 0x08);\n\t\t\t// Channel C states\n\t\t\tvar channelCType = configuration[6] & 0x0f;\n\t\t\tif (channelCType !== 0x07 && channelCType !== 0x08) {\n\t\t\t\t// Channel C type is output\n\t\t\t\tappContent['channelC_event_counter'] = payload.readUInt16BE(6);\n\t\t\t}\n\t\t\tappContent['channelC_current_state'] = Boolean(payload[10] & 0x10);\n\t\t\tappContent['channelC_previous_frame_state'] = Boolean(payload[10] & 0x20);\n\t\t\t// Channel D states\n\t\t\tvar channelDType = configuration[7] & 0x0f;\n\t\t\tif (channelDType !== 0x07 && channelDType !== 0x08) {\n\t\t\t\t// Channel D type is output\n\t\t\t\tappContent['channelD_event_counter'] = payload.readUInt16BE(8);\n\t\t\t}\n\t\t\tappContent['channelD_current_state'] = Boolean(payload[10] & 0x40);\n\t\t\tappContent['channelD_previous_frame_state'] = Boolean(payload[10] & 0x80);\n\t\t\tif (configuration.byteLength < 8) {\n\t\t\t\t// Report that decoding may be inaccurate as whole configuration was not available\n\t\t\t\tappContent.partialDecoding = codec.PartialDecodingReason.MISSING_CONFIGURATION;\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Dc0x40Parser;\n\t}());\n\tcodec.Dc0x40Parser = Dc0x40Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n\tvar number_of_sampling_before_historization_DEFAULT = 1;\n    /**\n     * Deltap 0x10 (configuration) input data\n     */\n\tvar Deltap0x10InputData = /** @class */ (function () {\n\t\tfunction Deltap0x10InputData() {\n\t\t\tthis.readingFrequency = 600;\n\t\t}\n\t\treturn Deltap0x10InputData;\n\t}());\n\tcodec.Deltap0x10InputData = Deltap0x10InputData;\n    /**\n     * Deltap 0x10 (configuration) frame builder\n     */\n\tvar Deltap0x10Builder = /** @class */ (function () {\n\t\tfunction Deltap0x10Builder() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x10;\n\t\t\tthis.inputDataClass = Deltap0x10InputData;\n\t\t}\n\t\tDeltap0x10Builder.prototype.buildFrame = function (inputData, network) {\n\t\t\tvar payload = Buffer.alloc(10);\n\t\t\tpayload[0] = this.frameCode;\n\t\t\t// reading frequency = acquisition period * historization period\n\t\t\tvar dataAcquisitionPeriod = inputData.readingFrequency / number_of_sampling_before_historization_DEFAULT;\n\t\t\t// S320\n\t\t\tpayload.writeUInt16BE(number_of_sampling_before_historization_DEFAULT, 6);\n\t\t\t// S321\n\t\t\tpayload.writeUInt16BE(this.sanitizeUInt16(dataAcquisitionPeriod / 2), 8);\n\t\t\treturn payload;\n\t\t};\n        /**\n         * Sanitize UInt16\n         * @param unsafeUInt16 unsafe UInt16\n         */\n\t\tDeltap0x10Builder.prototype.sanitizeUInt16 = function (unsafeUInt16) {\n\t\t\treturn Math.max(0, Math.min(Math.trunc(unsafeUInt16), Math.pow(2, 16) - 1));\n\t\t};\n\t\treturn Deltap0x10Builder;\n\t}());\n\tcodec.Deltap0x10Builder = Deltap0x10Builder;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P 0x10 (configuration) frame parser\n     */\n\tvar Deltap0x10Parser = /** @class */ (function () {\n\t\tfunction Deltap0x10Parser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x10;\n\t\t}\n\t\tDeltap0x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\t// register 300: Emission period of the life frame\n\t\t\t// register 301: Issue period, value betwenn 0 and 65535, 0: disabling periodic transmission\n\t\t\t// register 320: value betwenn 1 and 65535\n\t\t\t// register 321: value betwenn 0 and 65535, 0: no scanning, X2s\n\t\t\t// reading_frequency = S321 * S320\n\t\t\t// sending_frequency = S321 * S320 * S301\n\t\t\tvar appContent = {\n\t\t\t\ttype: '0x10 Delta P configuration',\n\t\t\t\t'transmission_period_keep_alive_sec': payload.readUInt16BE(2) * 10,\n\t\t\t\t'number_of_historization_before_sending': payload.readUInt16BE(4),\n\t\t\t\t'number_of_sampling_before_historization': payload.readUInt16BE(6),\n\t\t\t\t'sampling_period_sec': payload.readUInt16BE(8) * 2,\n\t\t\t\t'calculated_period_recording_sec': payload.readUInt16BE(8) * payload.readUInt16BE(6) * 2,\n\t\t\t\t'calculated_period_sending_sec': payload.readUInt16BE(8) * payload.readUInt16BE(6) * payload.readUInt16BE(4) * 2\n\t\t\t};\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Deltap0x10Parser;\n\t}());\n\tcodec.Deltap0x10Parser = Deltap0x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P 0x11 (0-10V configuration) frame parser\n     */\n\tvar Deltap0x11Parser = /** @class */ (function () {\n\t\tfunction Deltap0x11Parser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x11;\n\t\t}\n\t\tDeltap0x11Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\t// register 322: value betwenn 1 and 65535\n\t\t\t// register 323: value betwenn 0 and 65535, 0: no scanning, X2s\n\t\t\t// register 324: Issue period, value betwenn 0 and 65535, 0: disabling periodic transmission\n\t\t\t// reading_frequency = S322 * S323\n\t\t\t// sending_frequency = S322 * S323 * S324\n\t\t\tvar appContent = {\n\t\t\t\ttype: '0x11 Delta P 0-10V configuration',\n\t\t\t\t'number_of_sampling_before_historization': payload.readUInt16BE(2),\n\t\t\t\t'sampling_period_sec': payload.readUInt16BE(4) * 2,\n\t\t\t\t'number_of_historization_before_sending': payload.readUInt16BE(6),\n\t\t\t\t'calculated_period_recording_sec': payload.readUInt16BE(2) * payload.readUInt16BE(4) * 2,\n\t\t\t\t'calculated_period_sending_sec': payload.readUInt16BE(2) * payload.readUInt16BE(4) * payload.readUInt16BE(6) * 2\n\t\t\t};\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Deltap0x11Parser;\n\t}());\n\tcodec.Deltap0x11Parser = Deltap0x11Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P 0x1f (TOR configuration) frame parser\n     */\n\tvar Deltap0x1fParser = /** @class */ (function () {\n\t\tfunction Deltap0x1fParser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x1f;\n\t\t\tthis.sb0x1fParser = new codec.Sb0x1fParser();\n\t\t}\n\t\tDeltap0x1fParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.sb0x1fParser.parseFrame(payload, configuration, network);\n\t\t\tappContent['type'] = '0x1f Delta P channels configuration';\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Deltap0x1fParser;\n\t}());\n\tcodec.Deltap0x1fParser = Deltap0x1fParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P 0x30 (keep alive) frame parser\n     */\n\tvar Deltap0x30Parser = /** @class */ (function () {\n\t\tfunction Deltap0x30Parser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x30;\n\t\t\tthis.generic0x30Parser = new codec.Generic0x30Parser();\n\t\t}\n\t\tDeltap0x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.generic0x30Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['configuration_inconsistency'] = ((payload[1] & 0x08) !== 0) ? true : false;\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Deltap0x30Parser;\n\t}());\n\tcodec.Deltap0x30Parser = Deltap0x30Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P 0x51 (TOR configuration) frame parser\n     */\n\tvar Deltap0x51Parser = /** @class */ (function () {\n\t\tfunction Deltap0x51Parser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x51;\n\t\t\tthis.sb0x51Parser = new codec.Sb0x51Parser();\n\t\t}\n\t\tDeltap0x51Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.sb0x51Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['type'] = '0x51 Delta P - TOR1 alarm';\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Deltap0x51Parser;\n\t}());\n\tcodec.Deltap0x51Parser = Deltap0x51Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P 0x52 (TOR configuration) frame parser\n     */\n\tvar Deltap0x52Parser = /** @class */ (function () {\n\t\tfunction Deltap0x52Parser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x52;\n\t\t\tthis.sb0x52Parser = new codec.Sb0x52Parser();\n\t\t}\n\t\tDeltap0x52Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.sb0x52Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['type'] = '0x52 Delta P - TOR2 alarm';\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Deltap0x52Parser;\n\t}());\n\tcodec.Deltap0x52Parser = Deltap0x52Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P 0x53 (Delta P periodic) frame parser\n     */\n\tvar Deltap0x53Parser = /** @class */ (function () {\n\t\tfunction Deltap0x53Parser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x53;\n\t\t}\n\t\tDeltap0x53Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x53 Delta P periodic data', 'instantaneous_delta_pressure_pa': payload.readInt16BE(2) }, this.getHistoricDataFromPayload(payload, configuration));\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get historic data from payload\n         * @param payload payload\n         * @param configuration configuration\n         */\n\t\tDeltap0x53Parser.prototype.getHistoricDataFromPayload = function (payload, configuration) {\n\t\t\tvar appContent = {};\n\t\t\t// Loop through historic data (if present)\n\t\t\tfor (var offset = 4; offset < payload.byteLength; offset += 2) {\n\t\t\t\tvar index = (offset - 2) / 2;\n\t\t\t\tvar timeText = this.getTimeText(index);\n\t\t\t\tappContent[\"delta_pressure_\" + timeText + \"_pa\"] = payload.readInt16BE(offset);\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get reading frequency\n         * @param configuration configuration\n         */\n\t\tDeltap0x53Parser.prototype.getReadingFrequency = function (configuration) {\n\t\t\treturn configuration.byteLength > 0 ? configuration.readUInt16BE(8) * configuration.readUInt16BE(6) * 2 : null;\n\t\t};\n        /**\n         * Get time text\n         * @param readingFrequency reading frequency\n         * @param index index\n         */\n\t\tDeltap0x53Parser.prototype.getTimeText = function (index) {\n\t\t\tvar time = \"tminus\" + index;\n\t\t\treturn time;\n\t\t};\n\t\treturn Deltap0x53Parser;\n\t}());\n\tcodec.Deltap0x53Parser = Deltap0x53Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P 0x54 (pressure alarm) frame parser\n     */\n\tvar Deltap0x54Parser = /** @class */ (function () {\n\t\tfunction Deltap0x54Parser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x54;\n\t\t}\n\t\tDeltap0x54Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x54 Delta P alarm' }, this.getDataFromPayload(payload));\n\t\t\treturn appContent;\n\t\t};\n\t\tDeltap0x54Parser.prototype.getDataFromPayload = function (payload) {\n\t\t\tvar appContent = {};\n\t\t\t// Bit 0: alarm pressure state (0: inactive, 1: active)\n\t\t\tappContent['alarm_status_delta_pressure'] = payload.readUInt8(2) & 1;\n\t\t\t// Pressure value (en dixième de degrès)\n\t\t\tappContent['delta_pressure_pa'] = payload.readInt16BE(3);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Deltap0x54Parser;\n\t}());\n\tcodec.Deltap0x54Parser = Deltap0x54Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P 0x55 (periodic 0-10 V) frame parser\n     */\n\tvar Deltap0x55Parser = /** @class */ (function () {\n\t\tfunction Deltap0x55Parser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x55;\n\t\t}\n\t\tDeltap0x55Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x55 Delta P - periodic 0-10 V', 'instantaneous_voltage_mv': payload.readInt16BE(2) }, this.getHistoricDataFromPayload(payload, configuration));\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get historic data from payload\n         * @param payload payload\n         * @param configuration configuration\n         */\n\t\tDeltap0x55Parser.prototype.getHistoricDataFromPayload = function (payload, configuration) {\n\t\t\tvar appContent = {};\n\t\t\t// Loop through historic data (if present)\n\t\t\tfor (var offset = 4; offset < payload.byteLength; offset += 2) {\n\t\t\t\tvar index = (offset - 2) / 2;\n\t\t\t\tvar timeText = this.getTimeText(index);\n\t\t\t\tappContent[\"voltage_\" + timeText + \"_mv\"] = payload.readInt16BE(offset);\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get reading frequency\n         * @param configuration configuration\n         */\n\t\tDeltap0x55Parser.prototype.getReadingFrequency = function (configuration) {\n\t\t\treturn configuration.byteLength > 0 ? configuration.readUInt16BE(8) * configuration.readUInt16BE(6) * 2 : null;\n\t\t};\n        /**\n         * Get time text\n         * @param readingFrequency reading frequency\n         * @param index index\n         */\n\t\tDeltap0x55Parser.prototype.getTimeText = function (index) {\n\t\t\tvar time = \"tminus\" + index;\n\t\t\treturn time;\n\t\t};\n\t\treturn Deltap0x55Parser;\n\t}());\n\tcodec.Deltap0x55Parser = Deltap0x55Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P 0x56 (alarm 0-10 V) frame parser\n     */\n\tvar Deltap0x56Parser = /** @class */ (function () {\n\t\tfunction Deltap0x56Parser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = 0x56;\n\t\t}\n\t\tDeltap0x56Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x56 Delta P - alarm 0-10 V' }, this.getDataFromPayload(payload));\n\t\t\treturn appContent;\n\t\t};\n\t\tDeltap0x56Parser.prototype.getDataFromPayload = function (payload) {\n\t\t\tvar appContent = {};\n\t\t\t// Bit 0: alarm humidity state (0: inactive, 1:active)\n\t\t\tappContent['alarm_status_voltage'] = payload.readUInt8(2) & 1;\n\t\t\t// Voltage value (in mV)\n\t\t\tappContent['voltage_mv'] = payload.readInt16BE(3);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Deltap0x56Parser;\n\t}());\n\tcodec.Deltap0x56Parser = Deltap0x56Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Delta P status byte parser\n     */\n\tvar DeltapStatusByteParser = /** @class */ (function () {\n\t\tfunction DeltapStatusByteParser() {\n\t\t\tthis.deviceType = 'deltap';\n\t\t\tthis.frameCode = -1;\n\t\t}\n\t\tDeltapStatusByteParser.prototype.parseFrame = function (payload, configuration) {\n\t\t\tvar statusContent = {};\n\t\t\t// Status byte, applicative flags\n\t\t\tstatusContent['configuration_inconsistency'] = ((payload[1] & 0x08) !== 0) ? true : false;\n\t\t\treturn statusContent;\n\t\t};\n\t\treturn DeltapStatusByteParser;\n\t}());\n\tcodec.DeltapStatusByteParser = DeltapStatusByteParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Generic 0x10 (configuration) frame parser\n     */\n\tvar Generic0x10Parser = /** @class */ (function () {\n\t\tfunction Generic0x10Parser() {\n\t\t\tthis.deviceType = 'any';\n\t\t\tthis.frameCode = 0x10;\n\t\t}\n\t\tGeneric0x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\treturn { type: '0x10 Configuration' };\n\t\t};\n\t\treturn Generic0x10Parser;\n\t}());\n\tcodec.Generic0x10Parser = Generic0x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Generic 0x20 (configuration) frame parser\n     */\n\tvar Generic0x20Parser = /** @class */ (function () {\n\t\tfunction Generic0x20Parser() {\n\t\t\tthis.deviceType = 'any';\n\t\t\tthis.frameCode = 0x20;\n\t\t}\n\t\tGeneric0x20Parser.prototype.parseFrame = function (payload, configuration, network, deviceType) {\n\t\t\tvar appContent = { type: '0x20 Configuration' };\n\t\t\t// Content depends on network\n\t\t\tswitch (payload.byteLength) {\n\t\t\t\tcase 4:\n\t\t\t\t\tappContent = __assign({}, appContent, this.parseLora868(payload, deviceType));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tappContent = __assign({}, appContent, this.parseSigfox(payload, deviceType));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tappContent.partialDecoding = codec.PartialDecodingReason.MISSING_NETWORK;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Parse LoRa 868\n         * @param payload payload\n         */\n\t\tGeneric0x20Parser.prototype.parseLora868 = function (payload, deviceType) {\n\t\t\tvar appContent = {};\n\t\t\tif (deviceType === 'temp3' || deviceType === 'pulse3') {\n\t\t\t\tappContent['loraAdr'] = Boolean(payload[2] & 0x01);\n\t\t\t\tappContent['loraProvisioningMode'] = (payload[3] === 0) ? 'ABP' : 'OTAA';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tappContent['lora_adr'] = Boolean(payload[2] & 0x01);\n\t\t\t\tappContent['lora_provisioning_mode'] = (payload[3] === 0) ? 'ABP' : 'OTAA';\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Parse Sigfox\n         * @param payload payload\n         */\n\t\tGeneric0x20Parser.prototype.parseSigfox = function (payload, deviceType) {\n\t\t\tvar appContent = {};\n\t\t\tif (deviceType === 'temp3' || deviceType === 'pulse3') {\n\t\t\t\tappContent['sigfoxRetry'] = (payload[2] & 0x03);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tappContent['sigfox_retry'] = (payload[2] & 0x03);\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Generic0x20Parser;\n\t}());\n\tcodec.Generic0x20Parser = Generic0x20Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Generic 0x2f (downlink ACK) frame parser\n     */\n\tvar Generic0x2fParser = /** @class */ (function () {\n\t\tfunction Generic0x2fParser() {\n\t\t\tthis.deviceType = 'any';\n\t\t\tthis.frameCode = 0x2f;\n\t\t}\n\t\tGeneric0x2fParser.prototype.parseFrame = function (payload, configuration, network, deviceType) {\n\t\t\tvar appContent = { type: '0x2f Downlink ack' };\n\t\t\tif (deviceType === 'deltap' || deviceType === '') {\n\t\t\t\tappContent['requestStatus'] = this.getRequestStatusText(payload[2]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tappContent['downlinkFramecode'] = '0x' + payload[2].toString(16);\n\t\t\t\tappContent['requestStatus'] = this.getRequestStatusText(payload[3]);\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get Type text\n         * @param value value\n         */\n\t\tGeneric0x2fParser.prototype.getRequestStatusText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 1:\n\t\t\t\t\treturn 'success';\n\t\t\t\tcase 2:\n\t\t\t\t\treturn 'errorGeneric';\n\t\t\t\tcase 3:\n\t\t\t\t\treturn 'errorWrongState';\n\t\t\t\tcase 4:\n\t\t\t\t\treturn 'errorInvalidRequest';\n\t\t\t\tdefault:\n\t\t\t\t\treturn 'errorOtherReason';\n\t\t\t}\n\t\t};\n\t\treturn Generic0x2fParser;\n\t}());\n\tcodec.Generic0x2fParser = Generic0x2fParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Generic 0x30 (keep alive) frame parser\n     */\n\tvar Generic0x30Parser = /** @class */ (function () {\n\t\tfunction Generic0x30Parser() {\n\t\t\tthis.deviceType = 'any';\n\t\t\tthis.frameCode = 0x30;\n\t\t}\n\t\tGeneric0x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x30 Keep alive' };\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Generic0x30Parser;\n\t}());\n\tcodec.Generic0x30Parser = Generic0x30Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Generic 0x33 (Response to Set Register downlink) frame parser\n     */\n\tvar Generic0x33Parser = /** @class */ (function () {\n\t\tfunction Generic0x33Parser() {\n\t\t\tthis.deviceType = 'any';\n\t\t\tthis.frameCode = 0x33;\n\t\t}\n\t\tGeneric0x33Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x33 Set register status' };\n\t\t\tappContent['requestStatus'] = this.getRequestStatusText(payload[2]);\n\t\t\tappContent['registerId'] = payload.readUInt16BE(3);\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get Type text\n         * @param value value\n         */\n\t\tGeneric0x33Parser.prototype.getRequestStatusText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 1:\n\t\t\t\t\treturn 'success';\n\t\t\t\tcase 2:\n\t\t\t\t\treturn 'successNoUpdate';\n\t\t\t\tcase 3:\n\t\t\t\t\treturn 'errorCoherency';\n\t\t\t\tcase 4:\n\t\t\t\t\treturn 'errorInvalidRegister';\n\t\t\t\tcase 5:\n\t\t\t\t\treturn 'errorInvalidValue';\n\t\t\t\tcase 6:\n\t\t\t\t\treturn 'errorTruncatedValue';\n\t\t\t\tcase 7:\n\t\t\t\t\treturn 'errorAccesNotAllowed';\n\t\t\t\tdefault:\n\t\t\t\t\treturn 'errorOtherReason';\n\t\t\t}\n\t\t};\n\t\treturn Generic0x33Parser;\n\t}());\n\tcodec.Generic0x33Parser = Generic0x33Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Generic status byte parser\n     */\n\tvar GenericStatusByteParser = /** @class */ (function () {\n\t\tfunction GenericStatusByteParser() {\n\t\t\tthis.deviceType = 'any';\n\t\t\tthis.frameCode = -1;\n\t\t}\n\t\tGenericStatusByteParser.prototype.parseFrame = function (payload, configuration, network, deviceType) {\n\t\t\tvar statusContent = {};\n\t\t\tif (deviceType === 'repeater' || deviceType === 'temp3' || deviceType === 'pulse3') {\n\t\t\t\t// custom decoding\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstatusContent['frame_counter'] = (payload[1] & 0xe0) >> 5;\n\t\t\t\tstatusContent['hardware_error'] = Boolean((payload[1] & 0x04) !== 0);\n\t\t\t\tstatusContent['low_battery'] = Boolean((payload[1] & 0x02) !== 0);\n\t\t\t\tstatusContent['configuration_done'] = Boolean((payload[1] & 0x01) !== 0);\n\t\t\t}\n\t\t\treturn statusContent;\n\t\t};\n\t\treturn GenericStatusByteParser;\n\t}());\n\tcodec.GenericStatusByteParser = GenericStatusByteParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Motion 0x10 (configuration) frame parser\n     */\n\tvar Motion0x10Parser = /** @class */ (function () {\n\t\tfunction Motion0x10Parser() {\n\t\t\tthis.deviceType = 'motion';\n\t\t\tthis.frameCode = 0x10;\n\t\t}\n\t\tMotion0x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\t// calculated_period_recording_sec = S321 * S320 * 2\n\t\t\t// calculated_period_sending_sec = S321 * S320 * S301 * 2\n\t\t\tvar appContent = {\n\t\t\t\ttype: '0x10 Motion configuration',\n\t\t\t\t'transmission_period_keep_alive_sec': payload.readUInt16BE(2),\n\t\t\t\t'number_of_historization_before_sending': payload.readUInt16BE(4),\n\t\t\t\t'number_of_sampling_before_historization': payload.readUInt16BE(6),\n\t\t\t\t'sampling_period_sec': payload.readUInt16BE(8) * 2,\n\t\t\t\t'presence_detector_inhibition_duration_sec': payload.readUInt16BE(10) * 10,\n\t\t\t\t'calculated_period_recording_sec': payload.readUInt16BE(8) * payload.readUInt16BE(6) * 2,\n\t\t\t\t'calculated_period_sending_sec': payload.readUInt16BE(8) * payload.readUInt16BE(6) * payload.readUInt16BE(4) * 2\n\t\t\t};\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Motion0x10Parser;\n\t}());\n\tcodec.Motion0x10Parser = Motion0x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Motion 0x1f (TOR configuration) frame parser\n     */\n\tvar Motion0x1fParser = /** @class */ (function () {\n\t\tfunction Motion0x1fParser() {\n\t\t\tthis.deviceType = 'motion';\n\t\t\tthis.frameCode = 0x1f;\n\t\t\tthis.sb0x1fParser = new codec.Sb0x1fParser();\n\t\t}\n\t\tMotion0x1fParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.sb0x1fParser.parseFrame(payload, configuration, network);\n\t\t\tappContent['type'] = '0x1f Motion channels configuration';\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Motion0x1fParser;\n\t}());\n\tcodec.Motion0x1fParser = Motion0x1fParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Motion 0x30 (keep alive) frame parser\n     */\n\tvar Motion0x30Parser = /** @class */ (function () {\n\t\tfunction Motion0x30Parser() {\n\t\t\tthis.deviceType = 'motion';\n\t\t\tthis.frameCode = 0x30;\n\t\t\tthis.generic0x30Parser = new codec.Generic0x30Parser();\n\t\t}\n\t\tMotion0x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.generic0x30Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['configuration_inconsistency'] = ((payload[1] & 0x08) !== 0) ? true : false;\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Motion0x30Parser;\n\t}());\n\tcodec.Motion0x30Parser = Motion0x30Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Motion 0x4e (historic data) frame parser\n     */\n\tvar Motion0x4eParser = /** @class */ (function () {\n\t\tfunction Motion0x4eParser() {\n\t\t\tthis.deviceType = 'motion';\n\t\t\tthis.frameCode = 0x4e;\n\t\t}\n\t\tMotion0x4eParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x4e Motion data', 'presence_global_counter': payload.readUInt16BE(2), 'presence_current_counter': payload.readUInt16BE(4), 'luminosity_current_percentage': payload[6] }, this.getHistoricDataFromPayload(payload, configuration));\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get historic data from payload\n         * @param payload payload\n         * @param configuration configuration\n         */\n\t\tMotion0x4eParser.prototype.getHistoricDataFromPayload = function (payload, configuration) {\n\t\t\tvar appContent = {};\n\t\t\t// Loop through historic data (if present)\n\t\t\tfor (var offset = 7; offset < payload.byteLength; offset += 3) {\n\t\t\t\tvar index = (offset - 4) / 3;\n\t\t\t\tvar timeText = this.getTimeText(index);\n\t\t\t\tappContent[\"presence_\" + timeText + \"_counter\"] = payload.readUInt16BE(offset);\n\t\t\t\tappContent[\"luminosity_\" + timeText + \"_percentage\"] = payload[offset + 2];\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get reading frequency\n         * @param configuration configuration\n         */\n\t\tMotion0x4eParser.prototype.getReadingFrequency = function (configuration) {\n\t\t\treturn configuration.byteLength > 0 ? configuration.readUInt16BE(8) * configuration.readUInt16BE(6) * 2 : null;\n\t\t};\n        /**\n         * Get time text\n         * @param readingFrequency reading frequency\n         * @param index index\n         */\n\t\tMotion0x4eParser.prototype.getTimeText = function (index) {\n\t\t\tvar time = \"tminus\" + index;\n\t\t\treturn time;\n\t\t};\n\t\treturn Motion0x4eParser;\n\t}());\n\tcodec.Motion0x4eParser = Motion0x4eParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Motion 0x4f (presence alarm) frame parser\n     */\n\tvar Motion0x4fParser = /** @class */ (function () {\n\t\tfunction Motion0x4fParser() {\n\t\t\tthis.deviceType = 'motion';\n\t\t\tthis.frameCode = 0x4f;\n\t\t}\n\t\tMotion0x4fParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = {\n\t\t\t\ttype: '0x4f Motion presence alarm',\n\t\t\t\t'presence_global_counter': payload.readUInt16BE(2),\n\t\t\t\t'presence_counter_since_last_alarm': payload.readUInt16BE(4),\n\t\t\t};\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Motion0x4fParser;\n\t}());\n\tcodec.Motion0x4fParser = Motion0x4fParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Motion 0x50 (luminosity alarm) frame parser\n     */\n\tvar Motion0x50Parser = /** @class */ (function () {\n\t\tfunction Motion0x50Parser() {\n\t\t\tthis.deviceType = 'motion';\n\t\t\tthis.frameCode = 0x50;\n\t\t}\n\t\tMotion0x50Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = {\n\t\t\t\ttype: '0x50 Motion luminosity alarm',\n\t\t\t\t'luminosity_alarm_status': this.getAlarmStatusText(Boolean(payload[2])),\n\t\t\t\t'luminosity_percentage': payload[3]\n\t\t\t};\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get alarm status text\n         * @param status status\n         */\n\t\tMotion0x50Parser.prototype.getAlarmStatusText = function (status) {\n\t\t\treturn status ? 'active' : 'inactive';\n\t\t};\n\t\treturn Motion0x50Parser;\n\t}());\n\tcodec.Motion0x50Parser = Motion0x50Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Motion 0x51 (TOR configuration) frame parser\n     */\n\tvar Motion0x51Parser = /** @class */ (function () {\n\t\tfunction Motion0x51Parser() {\n\t\t\tthis.deviceType = 'motion';\n\t\t\tthis.frameCode = 0x51;\n\t\t\tthis.sb0x51Parser = new codec.Sb0x51Parser();\n\t\t}\n\t\tMotion0x51Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.sb0x51Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['type'] = '0x51 Motion TOR1 alarm';\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Motion0x51Parser;\n\t}());\n\tcodec.Motion0x51Parser = Motion0x51Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Motion 0x52 (TOR configuration) frame parser\n     */\n\tvar Motion0x52Parser = /** @class */ (function () {\n\t\tfunction Motion0x52Parser() {\n\t\t\tthis.deviceType = 'motion';\n\t\t\tthis.frameCode = 0x52;\n\t\t\tthis.sb0x52Parser = new codec.Sb0x52Parser();\n\t\t}\n\t\tMotion0x52Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.sb0x52Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['type'] = '0x52 Motion TOR2 alarm';\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Motion0x52Parser;\n\t}());\n\tcodec.Motion0x52Parser = Motion0x52Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Motion status byte parser\n     */\n\tvar MotionStatusByteParser = /** @class */ (function () {\n\t\tfunction MotionStatusByteParser() {\n\t\t\tthis.deviceType = 'motion';\n\t\t\tthis.frameCode = -1;\n\t\t}\n\t\tMotionStatusByteParser.prototype.parseFrame = function (payload, configuration) {\n\t\t\tvar statusContent = {};\n\t\t\t// Status byte, applicative flags\n\t\t\tstatusContent['configuration_inconsistency'] = ((payload[1] & 0x08) !== 0) ? true : false;\n\t\t\treturn statusContent;\n\t\t};\n\t\treturn MotionStatusByteParser;\n\t}());\n\tcodec.MotionStatusByteParser = MotionStatusByteParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 0x10 (configuration) input data\n     */\n\tvar Pulse0x10InputData = /** @class */ (function () {\n\t\tfunction Pulse0x10InputData() {\n\t\t\tthis.historicLogEvery1h = false;\n\t\t}\n\t\treturn Pulse0x10InputData;\n\t}());\n\tcodec.Pulse0x10InputData = Pulse0x10InputData;\n    /**\n     * Pulse 0x10 (configuration) frame builder\n     */\n\tvar Pulse0x10Builder = /** @class */ (function () {\n\t\tfunction Pulse0x10Builder() {\n\t\t\tthis.deviceType = 'pulse';\n\t\t\tthis.frameCode = 0x10;\n\t\t\tthis.inputDataClass = Pulse0x10InputData;\n\t\t}\n\t\tPulse0x10Builder.prototype.buildFrame = function (inputData, network) {\n\t\t\tvar payload = Buffer.alloc(22);\n\t\t\tpayload[0] = this.frameCode;\n\t\t\t// Historic mode\n\t\t\tpayload[6] = inputData.historicLogEvery1h ? 0x02 : 0x01;\n\t\t\treturn payload;\n\t\t};\n\t\treturn Pulse0x10Builder;\n\t}());\n\tcodec.Pulse0x10Builder = Pulse0x10Builder;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 0x10 (configuration) frame parser\n     */\n\tvar Pulse0x10Parser = /** @class */ (function () {\n\t\tfunction Pulse0x10Parser() {\n\t\t\tthis.deviceType = 'pulse';\n\t\t\tthis.frameCode = 0x10;\n\t\t\tthis.pulse0x11Parser = new codec.Pulse0x11Parser();\n\t\t\tthis.pulse0x12Parser = new codec.Pulse0x12Parser();\n\t\t}\n\t\tPulse0x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x10 Pulse configuration' };\n\t\t\t// Product mode\n\t\t\tappContent['product_mode'] = codec.PlateformCommonUtils.getProductModeText(payload[2]);\n\t\t\t// Infer network from frame\n\t\t\tvar inferredNetwork = this.inferNetwork(payload.byteLength);\n\t\t\t// Resolve known netowrk\n\t\t\tvar knownNetwork = network === 'unknown' ? inferredNetwork : network;\n\t\t\t// Transmission period\n\t\t\tvar offset = 0;\n\t\t\tif (payload[8] === 2) {\n\t\t\t\t// TEST mode => period = value * 20sec\n\t\t\t\tif (knownNetwork === 'sigfox') {\n\t\t\t\t\tappContent['transmission_period_sec'] = payload[3] * 20;\n\t\t\t\t\toffset = -1; // value is on 1 byte for Sigfox, shift further payload reading\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tappContent['transmission_period_sec'] = payload.readUInt16BE(3) * 20;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// PRODUCTION mode\n\t\t\t\tif (knownNetwork === 'sigfox') {\n\t\t\t\t\t// Sigfox: period = value * 10min\n\t\t\t\t\tappContent['transmission_period_min'] = payload[3] * 10;\n\t\t\t\t\toffset = -1; // value is on 1 byte for Sigfox, shift further payload reading\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// LoRa 868: period = value * 1min\n\t\t\t\t\tappContent['transmission_period_min'] = payload.readUInt16BE(3);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Channels configuration\n\t\t\tappContent = __assign({}, appContent, this.parseChannelsGeneralConfiguration(payload, offset));\n\t\t\t// Historic mode\n\t\t\tappContent['historic_mode'] = this.getHistoricModeText(payload[offset + 6]);\n\t\t\t// Debouncing periods\n\t\t\tappContent['channelA_configuration_debouncing_period'] =\n\t\t\t\tthis.getDebouncingPeriodText(payload[offset + 7] & 0x0f);\n\t\t\tappContent['channelB_configuration_debouncing_period'] =\n\t\t\t\tthis.getDebouncingPeriodText((payload[offset + 7] & 0xf0) >> 4);\n\t\t\t// Flow calculation period\n\t\t\tif (payload[2] === 2) {\n\t\t\t\t// TEST mode => period = value * 20sec\n\t\t\t\tappContent['flow_calculation_period_sec'] = payload.readUInt16BE(offset + 8) * 20;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// PRODUCTION mode => period = value * 1min\n\t\t\t\tappContent['flow_calculation_period_min'] = payload.readUInt16BE(offset + 8);\n\t\t\t}\n\t\t\tif (knownNetwork === 'unknown') {\n\t\t\t\tappContent.partialDecoding = codec.PartialDecodingReason.MISSING_NETWORK;\n\t\t\t}\n\t\t\telse if (knownNetwork === 'lora868') {\n\t\t\t\t// Parse using 0x11 and 0x12 frame parsers\n\t\t\t\tappContent = __assign({}, appContent, this.parseUsing0x11(payload, knownNetwork));\n\t\t\t\tappContent = __assign({}, appContent, this.parseUsing0x12(payload, knownNetwork));\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Infer network\n         * @param length frame length\n         */\n\t\tPulse0x10Parser.prototype.inferNetwork = function (length) {\n\t\t\t//            +--------------+\n\t\t\t//            | Frame length |\n\t\t\t// +----------+--------------+\n\t\t\t// | LoRa 868 |           22 |\n\t\t\t// | Sigfox   |            9 |\n\t\t\t// +----------+--------------+\n\t\t\tswitch (length) {\n\t\t\t\tcase 22:\n\t\t\t\t\treturn 'lora868';\n\t\t\t\tcase 9:\n\t\t\t\t\treturn 'sigfox';\n\t\t\t\tdefault:\n\t\t\t\t\treturn 'unknown';\n\t\t\t}\n\t\t};\n        /**\n         * Parse channel configuration\n         * @param payload payload\n         * @param offset offset\n         */\n\t\tPulse0x10Parser.prototype.parseChannelsGeneralConfiguration = function (payload, offset) {\n\t\t\tvar appContent = {};\n\t\t\t// Channel A\n\t\t\tappContent['channelA_configuration_state'] = this.getStateText(Boolean(payload[offset + 5] & 0x01));\n\t\t\tappContent['channelA_configuration_type'] = this.getTypeText(Boolean(payload[offset + 5] & 0x02));\n\t\t\tappContent['channelA_configuration_tamper_activated'] = Boolean(payload[offset + 5] & 0x08);\n\t\t\t// Channel B\n\t\t\tappContent['channelB_configuration_state'] = this.getStateText(Boolean(payload[offset + 5] & 0x10));\n\t\t\tappContent['channelB_configuration_type'] = this.getTypeText(Boolean(payload[offset + 5] & 0x20));\n\t\t\tappContent['channelB_configuration_tamper_activated'] = Boolean(payload[offset + 5] & 0x80);\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get state text\n         * @param value value\n         */\n\t\tPulse0x10Parser.prototype.getStateText = function (value) {\n\t\t\treturn value ? 'enabled' : 'disabled';\n\t\t};\n        /**\n         * Get type text\n         * @param value value\n         */\n\t\tPulse0x10Parser.prototype.getTypeText = function (value) {\n\t\t\treturn value ? 'gas_pull_up_on' : 'other_pull_up_off';\n\t\t};\n        /**\n         * Get historic mode text\n         * @param value value\n         */\n\t\tPulse0x10Parser.prototype.getHistoricModeText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn 'no_historic';\n\t\t\t\tcase 1:\n\t\t\t\t\treturn 'historic_log_every_10min';\n\t\t\t\tcase 2:\n\t\t\t\t\treturn 'historic_log_every_1h';\n\t\t\t\tdefault:\n\t\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n        /**\n         * Get debouncing period text\n         * @param value value\n         */\n\t\tPulse0x10Parser.prototype.getDebouncingPeriodText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn 'no_debounce';\n\t\t\t\tcase 1:\n\t\t\t\t\treturn '1msec';\n\t\t\t\tcase 2:\n\t\t\t\t\treturn '10msec';\n\t\t\t\tcase 3:\n\t\t\t\t\treturn '20msec';\n\t\t\t\tcase 4:\n\t\t\t\t\treturn '50msec';\n\t\t\t\tcase 5:\n\t\t\t\t\treturn '100msec';\n\t\t\t\tcase 6:\n\t\t\t\t\treturn '200msec';\n\t\t\t\tcase 7:\n\t\t\t\t\treturn '500msec';\n\t\t\t\tcase 8:\n\t\t\t\t\treturn '1s';\n\t\t\t\tcase 9:\n\t\t\t\t\treturn '2s';\n\t\t\t\tcase 10:\n\t\t\t\t\treturn '5s';\n\t\t\t\tcase 11:\n\t\t\t\t\treturn '10s';\n\t\t\t\tdefault:\n\t\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n        /**\n         * Parse using 0x11 frame parser\n         * @param payload payload\n         * @param network network: unknown, lora868 or sigfox\n         * @param offset offset\n         */\n\t\tPulse0x10Parser.prototype.parseUsing0x11 = function (payload, network) {\n\t\t\t// concat method is not supported by shim => use a basic method instead\n\t\t\t// var payloadWith0x11 = Buffer.concat([Buffer.from([0x11, 0x00]), payload.slice(10, 18)]);\n\t\t\tvar payloadWith0x11 = payload.slice(8, 18);\n\t\t\tpayloadWith0x11.writeUInt16BE(0x1100, 0);\n\t\t\tvar appContent = this.pulse0x11Parser.parseFrame(payloadWith0x11, payload, network);\n\t\t\tdelete appContent['type'];\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Parse using 0x12 frame parser\n         * @param payload payload\n         * @param network network: unknown, lora868 or sigfox\n         * @param offset offset\n         */\n\t\tPulse0x10Parser.prototype.parseUsing0x12 = function (payload, network) {\n\t\t\t// concat method is not supported by shim => use a basic method instead\n\t\t\t// var payloadWith0x12 = Buffer.concat([Buffer.from([0x12, 0x00]), payload.slice(18, 22)]);\n\t\t\tvar payloadWith0x12 = payload.slice(16, 22);\n\t\t\tpayloadWith0x12.writeUInt16BE(0x1200, 0);\n\t\t\tvar appContent = this.pulse0x12Parser.parseFrame(payloadWith0x12, payload, network);\n\t\t\tdelete appContent['type'];\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Pulse0x10Parser;\n\t}());\n\tcodec.Pulse0x10Parser = Pulse0x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 0x11 (configuration) frame parser\n     */\n\tvar Pulse0x11Parser = /** @class */ (function () {\n\t\tfunction Pulse0x11Parser() {\n\t\t\tthis.deviceType = 'pulse';\n\t\t\tthis.frameCode = 0x11;\n\t\t}\n\t\tPulse0x11Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x11 Pulse configuration' };\n\t\t\t// Overflow alarm trigger threshold\n\t\t\tappContent['channelA_leakage_detection_overflow_alarm_trigger_threshold'] = payload.readUInt16BE(2);\n\t\t\tappContent['channelB_leakage_detection_overflow_alarm_trigger_threshold'] = payload.readUInt16BE(4);\n\t\t\t// Leakage threshold\n\t\t\tappContent['channelA_leakage_detection_threshold'] = payload.readUInt16BE(6);\n\t\t\tappContent['channelB_leakage_detection_threshold'] = payload.readUInt16BE(8);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Pulse0x11Parser;\n\t}());\n\tcodec.Pulse0x11Parser = Pulse0x11Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 0x12 (configuration) frame parser\n     */\n\tvar Pulse0x12Parser = /** @class */ (function () {\n\t\tfunction Pulse0x12Parser() {\n\t\t\tthis.deviceType = 'pulse';\n\t\t\tthis.frameCode = 0x12;\n\t\t}\n\t\tPulse0x12Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x12 Pulse configuration' };\n\t\t\t// Daily periods below which leakage alarm triggered\n\t\t\tappContent['channelA_leakage_detection_daily_periods_below_which_leakage_alarm_triggered']\n\t\t\t\t= payload.readUInt16BE(2);\n\t\t\tappContent['channelB_leakage_detection_daily_periods_below_which_leakage_alarm_triggered']\n\t\t\t\t= payload.readUInt16BE(4);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Pulse0x12Parser;\n\t}());\n\tcodec.Pulse0x12Parser = Pulse0x12Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 0x30 (keep alive) frame parser\n     */\n\tvar Pulse0x30Parser = /** @class */ (function () {\n\t\tfunction Pulse0x30Parser() {\n\t\t\tthis.deviceType = 'pulse';\n\t\t\tthis.frameCode = 0x30;\n\t\t}\n\t\tPulse0x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x30 Pulse keep alive' };\n\t\t\t// Alarm states\n\t\t\tappContent['channelA_flow_alarm'] = Boolean(payload[2] & 0x01);\n\t\t\tappContent['channelB_flow_alarm'] = Boolean(payload[2] & 0x02);\n\t\t\tappContent['channelA_fraud_alarm'] = Boolean(payload[2] & 0x04);\n\t\t\tappContent['channelB_fraud_alarm'] = Boolean(payload[2] & 0x08);\n\t\t\tappContent['channelA_leakage_alarm'] = Boolean(payload[2] & 0x10);\n\t\t\tappContent['channelB_leakage_alarm'] = Boolean(payload[2] & 0x20);\n\t\t\t// Max/min measured flows\n\t\t\tappContent['channelA_last_24h_max_flow'] = payload.readUInt16BE(3);\n\t\t\tappContent['channelB_last_24h_max_flow'] = payload.readUInt16BE(5);\n\t\t\tappContent['channelA_last_24h_min_flow'] = payload.readUInt16BE(7);\n\t\t\tappContent['channelB_last_24h_min_flow'] = payload.readUInt16BE(9);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Pulse0x30Parser;\n\t}());\n\tcodec.Pulse0x30Parser = Pulse0x30Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 0x46 (data) frame parser\n     */\n\tvar Pulse0x46Parser = /** @class */ (function () {\n\t\tfunction Pulse0x46Parser() {\n\t\t\tthis.deviceType = 'pulse';\n\t\t\tthis.frameCode = 0x46;\n\t\t}\n\t\tPulse0x46Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x46 Pulse data' };\n\t\t\t// Current indexes\n\t\t\tappContent['channelA_index'] = payload.readUInt32BE(2);\n\t\t\tappContent['channelB_index'] = payload.readUInt32BE(6);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Pulse0x46Parser;\n\t}());\n\tcodec.Pulse0x46Parser = Pulse0x46Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 0x47 (alarm) frame parser\n     */\n\tvar Pulse0x47Parser = /** @class */ (function () {\n\t\tfunction Pulse0x47Parser() {\n\t\t\tthis.deviceType = 'pulse';\n\t\t\tthis.frameCode = 0x47;\n\t\t}\n\t\tPulse0x47Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x47 Pulse alarm' };\n\t\t\t// Flows when overflow occured\n\t\t\tappContent['channelA_flow'] = payload.readUInt16BE(2);\n\t\t\tappContent['channelB_flow'] = payload.readUInt16BE(4);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Pulse0x47Parser;\n\t}());\n\tcodec.Pulse0x47Parser = Pulse0x47Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 0x48 (historic data) frame parser\n     */\n\tvar Pulse0x48Parser = /** @class */ (function () {\n\t\tfunction Pulse0x48Parser() {\n\t\t\tthis.deviceType = 'pulse';\n\t\t\tthis.frameCode = 0x48;\n\t\t}\n\t\tPulse0x48Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x48 Pulse historic data' };\n\t\t\t// Frame index\n\t\t\tvar frameIndex = payload[2];\n\t\t\tappContent['frame_index'] = frameIndex;\n\t\t\t// Infer network and historic configuration from frame\n\t\t\tvar _a = this.inferNetworkAndHistoricCfg(frameIndex, payload.byteLength), inferredNetwork = _a.inferredNetwork, inferredHistoricCfg = _a.inferredHistoricCfg;\n\t\t\t// Resolve known netowrk\n\t\t\tvar knownNetwork = network === 'unknown' ? inferredNetwork : network;\n\t\t\tvar historicConfiguration;\n\t\t\tif (configuration[6]) {\n\t\t\t\t// Configuration is known, read historic configuration\n\t\t\t\thistoricConfiguration = (configuration[6] & 0x03);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Configuration is not known, use inferred historic configuration\n\t\t\t\thistoricConfiguration = inferredHistoricCfg;\n\t\t\t}\n\t\t\tif (historicConfiguration < 0) {\n\t\t\t\t// Historic configuration could not be inferred\n\t\t\t\tappContent.partialDecoding = codec.PartialDecodingReason.MISSING_CONFIGURATION;\n\t\t\t\treturn appContent;\n\t\t\t}\n\t\t\t// Parse indexes\n\t\t\tappContent = __assign({}, appContent, this.parseIndexes(payload, frameIndex, historicConfiguration));\n\t\t\tif (knownNetwork === 'unknown') {\n\t\t\t\t// Network could not be inferred\n\t\t\t\tappContent.partialDecoding = codec.PartialDecodingReason.MISSING_NETWORK;\n\t\t\t\treturn appContent;\n\t\t\t}\n\t\t\t// Parse deltas\n\t\t\tappContent = __assign({}, appContent, this.parseDeltas(payload, knownNetwork, frameIndex, historicConfiguration));\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Parse indexes\n         * @param payload payload\n         * @param frameIndex frame index\n         * @param historicConfiguration historic configuration\n         */\n\t\tPulse0x48Parser.prototype.parseIndexes = function (payload, frameIndex, historicConfiguration) {\n\t\t\tvar appContent = {};\n\t\t\tif (frameIndex !== 0) {\n\t\t\t\t// Indexes are not in this frame\n\t\t\t\treturn appContent;\n\t\t\t}\n\t\t\t// Index values\n\t\t\tvar time = historicConfiguration === 0x1 ? '10min' : '1h';\n\t\t\tappContent[\"channelA_index_\" + time + \"_after_previous_frame\"] = payload.readUInt32BE(3);\n\t\t\tappContent[\"channelB_index_\" + time + \"_after_previous_frame\"] = payload.readUInt32BE(7);\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Parse deltas\n         * @param payload payload\n         * @param network network: lora868 or sigfox\n         * @param frameIndex frame index\n         * @param historicConfiguration historic configuration\n         */\n\t\tPulse0x48Parser.prototype.parseDeltas = function (payload, network, frameIndex, historicConfiguration) {\n\t\t\tvar appContent = {};\n\t\t\t// Example for 1h history (frame 1/1)\n\t\t\t// +----------------------------------------------------+---------------+\n\t\t\t// |                        Key                         | Data location |\n\t\t\t// +----------------------------------------------------+---------------+\n\t\t\t// | channelA_delta_10min_to_20min_after_previous_frame | bytes 11-12   |\n\t\t\t// | channelB_delta_10min_to_20min_after_previous_frame | bytes 13-14   |\n\t\t\t// | channelA_delta_20min_to_30min_after_previous_frame | bytes 15-16   |\n\t\t\t// | ...                                                | ...           |\n\t\t\t// | channelA_delta_50min_to_60min_after_previous_frame | bytes 27-28   |\n\t\t\t// | channelB_delta_50min_to_60min_after_previous_frame | bytes 29-30   |\n\t\t\t// +----------------------------------------------------+---------------+\n\t\t\t// Example for 1d history (frame 2/3)\n\t\t\t// +------------------------------------------------+---------------+\n\t\t\t// |                      Key                       | Data location |\n\t\t\t// +------------------------------------------------+---------------+\n\t\t\t// | channelA_delta_11h_to_12h_after_previous_frame | bytes 3-4     |\n\t\t\t// | channelB_delta_11h_to_12h_after_previous_frame | bytes 5-6     |\n\t\t\t// | channelA_delta_12h_to_13h_after_previous_frame | bytes 7-8     |\n\t\t\t// | ...                                            | ...           |\n\t\t\t// | channelA_delta_22h_to_23h_after_previous_frame | bytes 47-48   |\n\t\t\t// | channelB_delta_22h_to_23h_after_previous_frame | bytes 49-50   |\n\t\t\t// +------------------------------------------------+---------------+\n\t\t\t// Delta values\n\t\t\tvar start = frameIndex === 0 ? 11 : 3;\n\t\t\tfor (var offset = start; offset < payload.byteLength; offset += 4) {\n\t\t\t\tvar intervalText = '';\n\t\t\t\tif (historicConfiguration === 0x1) {\n\t\t\t\t\t// Step is 10min\n\t\t\t\t\tvar base = this.getBaseFor1hHistory(network, frameIndex);\n\t\t\t\t\tvar intervalStart = base + (offset - start) / 4 * 10;\n\t\t\t\t\tintervalText = intervalStart + \"min_to_\" + (intervalStart + 10) + \"min\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Step is 1h\n\t\t\t\t\tvar base = this.getBaseFor1dHistory(network, frameIndex);\n\t\t\t\t\tvar intervalStart = base + (offset - start) / 4;\n\t\t\t\t\tintervalText = intervalStart + \"h_to_\" + (intervalStart + 1) + \"h\";\n\t\t\t\t}\n\t\t\t\tappContent[\"channelA_delta_\" + intervalText + \"_after_previous_frame\"] = payload.readUInt16BE(offset);\n\t\t\t\tappContent[\"channelB_delta_\" + intervalText + \"_after_previous_frame\"] = payload.readUInt16BE(offset + 2);\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Infer network and historic configuration\n         * @param payload payload\n         * @param configuration configuration\n         */\n\t\tPulse0x48Parser.prototype.inferNetworkAndHistoricCfg = function (frameIndex, byteLength) {\n\t\t\t// +-----------------------+-------------------+-----------------------------+\n\t\t\t// | Frame count [lengths] | 1h history (0x1)  |      1d history (0x2)       |\n\t\t\t// +-----------------------+-------------------+-----------------------------+\n\t\t\t// | LoRa 868              | 1 [31]            | 3  [51, 51, 7]              |\n\t\t\t// | Sigfox                | 4 [11, 11, 11, 7] | 13 [11, 11, 11, ..., 11, 7] |\n\t\t\t// +-----------------------+-------------------+-----------------------------+\n\t\t\tif (byteLength === 31) {\n\t\t\t\t// LoRa 868 1h history\n\t\t\t\treturn { inferredNetwork: 'lora868', inferredHistoricCfg: 0x1 };\n\t\t\t}\n\t\t\telse if (byteLength === 51 || (frameIndex === 2 && byteLength === 7)) {\n\t\t\t\t// LoRa 868 1d history\n\t\t\t\treturn { inferredNetwork: 'lora868', inferredHistoricCfg: 0x2 };\n\t\t\t}\n\t\t\telse if (frameIndex === 3 && byteLength === 7) {\n\t\t\t\t// Sigfox 1h history\n\t\t\t\treturn { inferredNetwork: 'sigfox', inferredHistoricCfg: 0x1 };\n\t\t\t}\n\t\t\telse if (frameIndex >= 3) {\n\t\t\t\t// Sigfox 1d history\n\t\t\t\treturn { inferredNetwork: 'sigfox', inferredHistoricCfg: 0x2 };\n\t\t\t}\n\t\t\telse if (byteLength === 11) {\n\t\t\t\t// Sigfox\n\t\t\t\treturn { inferredNetwork: 'sigfox', inferredHistoricCfg: -1 };\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Unknown\n\t\t\t\treturn { inferredNetwork: 'unknown', inferredHistoricCfg: -1 };\n\t\t\t}\n\t\t};\n        /**\n         * Get base for 1h history\n         * @param frameIndex frame index\n         * @param network network: lora868 or sigfox\n         */\n\t\tPulse0x48Parser.prototype.getBaseFor1hHistory = function (network, frameIndex) {\n\t\t\t// +---------------------------+----+----+----+----+\n\t\t\t// | Base for 1h history (0x1) | 0  | 1  | 2  | 3  |\n\t\t\t// +---------------------------+----+----+----+----+\n\t\t\t// | LoRa 868                  | 10 |    |    |    |\n\t\t\t// | Sigfox                    | 10 | 10 | 30 | 50 |\n\t\t\t// +---------------------------+----+----+----+----+\n\t\t\tswitch (network) {\n\t\t\t\tcase 'sigfox':\n\t\t\t\t\treturn [10, 10, 30, 50][frameIndex];\n\t\t\t\t// case 'lora868':\n\t\t\t\tdefault:\n\t\t\t\t\treturn 10;\n\t\t\t}\n\t\t};\n        /**\n         * Get base for 1d history\n         * @param frameIndex frame index\n         * @param network network: lora868 or sigfox\n         */\n\t\tPulse0x48Parser.prototype.getBaseFor1dHistory = function (network, frameIndex) {\n\t\t\t// +---------------------------+---+----+----+---+---+---+----+----+----+----+----+----+----+\n\t\t\t// | Base for 1d history (0x2) | 0 | 1  | 2  | 3 | 4 | 5 | 6  | 7  | 8  | 9  | 10 | 11 | 12 |\n\t\t\t// +---------------------------+---+----+----+---+---+---+----+----+----+----+----+----+----+\n\t\t\t// | LoRa 868                  | 1 | 11 | 23 |   |   |   |    |    |    |    |    |    |    |\n\t\t\t// | Sigfox                    | 1 |  1 |  3 | 5 | 7 | 9 | 11 | 13 | 15 | 17 | 19 | 21 | 23 |\n\t\t\t// +---------------------------+---+----+----+---+---+---+----+----+----+----+----+----+----+\n\t\t\tswitch (network) {\n\t\t\t\tcase 'sigfox':\n\t\t\t\t\treturn [1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23][frameIndex];\n\t\t\t\t// case 'lora868':\n\t\t\t\tdefault:\n\t\t\t\t\treturn [1, 11, 13][frameIndex];\n\t\t\t}\n\t\t};\n\t\treturn Pulse0x48Parser;\n\t}());\n\tcodec.Pulse0x48Parser = Pulse0x48Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 3 0x10 (configuration) frame parser\n     */\n\tvar PulseV30x10Parser = /** @class */ (function () {\n\t\tfunction PulseV30x10Parser() {\n\t\t\tthis.deviceType = 'pulse3';\n\t\t\tthis.frameCode = 0x10;\n\t\t}\n\t\tPulseV30x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x10 Pulse 3 configuration' };\n\t\t\tvar contentA = {};\n\t\t\tvar contentB = {};\n\t\t\t// Product mode\n\t\t\tappContent['productMode'] = codec.PlateformCommonUtils.getProductModeText(payload[2]);\n\t\t\t// Transmission period\n\t\t\tappContent['numberOfHistorizationBeforeSending'] = payload.readUInt16BE(3);\n\t\t\tappContent['samplingPeriod'] = { 'unit': 's', 'value': payload.readUInt16BE(6) * 2 };\n\t\t\tappContent['calculatedSendingPeriod'] = {\n\t\t\t\t'unit': 's',\n\t\t\t\t'value': payload.readUInt16BE(3) * payload.readUInt16BE(6) * 2\n\t\t\t};\n\t\t\t// Flow calculation period\n\t\t\tif (payload[2] === 2) {\n\t\t\t\t// TEST mode => period = value * 20sec\n\t\t\t\tappContent['flowCalculationPeriod'] = { 'unit': 's', 'value': payload.readUInt16BE(9) * 20 };\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// PRODUCTION mode => period = value * 1min\n\t\t\t\tappContent['flowCalculationPeriod'] = { 'unit': 'm', 'value': payload.readUInt16BE(9) };\n\t\t\t}\n\t\t\t// LoRa frame (28 bytes) / SFX (11 bytes)\n\t\t\tif (payload.byteLength === 28) {\n\t\t\t\tappContent['redundantSamples'] = payload.readUInt8(27);\n\t\t\t}\n\t\t\t// Channels A configuration\n\t\t\tcontentA['state'] = this.getStateText(Boolean(payload[5] & 0x01));\n\t\t\tcontentA['type'] = this.getTypeText(Boolean(payload[5] & 0x02));\n\t\t\tcontentA['debouncingPeriod'] = {\n\t\t\t\t'unit': 'ms', 'value': this.getDebouncingPeriodText(payload[8] & 0x0f)\n\t\t\t};\n\t\t\t// LoRa frame (28 bytes) / SFX (11 bytes)\n\t\t\tif (payload.byteLength === 28) {\n\t\t\t\tcontentA['leakageDetectionOverflowAlarmTriggerThreshold'] = payload.readUInt16BE(11);\n\t\t\t\tcontentA['leakageDetectionThreshold'] = payload.readUInt16BE(15);\n\t\t\t\tcontentA['leakageDetectionDailyPeriodsBelowWhichLeakageAlarmTriggered']\n\t\t\t\t\t= payload.readUInt16BE(19);\n\t\t\t\tcontentA['tamperActivated'] = Boolean(payload[5] & 0x08);\n\t\t\t\tcontentA['samplePeriodForTamperDetection'] = payload.readUInt8(23);\n\t\t\t\tcontentA['tamperThreshold'] = payload.readUInt8(24);\n\t\t\t}\n\t\t\tappContent['channelA'] = contentA;\n\t\t\t// Channel B configuration\n\t\t\tcontentB['state'] = this.getStateText(Boolean(payload[5] & 0x10));\n\t\t\tcontentB['type'] = this.getTypeText(Boolean(payload[5] & 0x20));\n\t\t\tcontentB['debouncingPeriod'] = {\n\t\t\t\t'unit': 'ms', 'value': this.getDebouncingPeriodText((payload[8] & 0xf0) >> 4)\n\t\t\t};\n\t\t\t// LoRa frame (28 bytes) / SFX (11 bytes)\n\t\t\tif (payload.byteLength === 28) {\n\t\t\t\tcontentB['leakageDetectionOverflowAlarmTriggerThreshold'] = payload.readUInt16BE(13);\n\t\t\t\tcontentB['leakageDetectionThreshold'] = payload.readUInt16BE(17);\n\t\t\t\tcontentB['leakageDetectionDailyPeriodsBelowWhichLeakageAlarmTriggered']\n\t\t\t\t\t= payload.readUInt16BE(21);\n\t\t\t\tcontentB['tamperActivated'] = Boolean(payload[5] & 0x80);\n\t\t\t\tcontentB['samplePeriodForTamperDetection'] = payload.readUInt8(25);\n\t\t\t\tcontentB['tamperThreshold'] = payload.readUInt8(26);\n\t\t\t}\n\t\t\tappContent['channelB'] = contentB;\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get state text\n         * @param value value\n         */\n\t\tPulseV30x10Parser.prototype.getStateText = function (value) {\n\t\t\treturn value ? 'enabled' : 'disabled';\n\t\t};\n        /**\n         * Get type text\n         * @param value value\n         */\n\t\tPulseV30x10Parser.prototype.getTypeText = function (value) {\n\t\t\treturn value ? 'gasPullUpOn' : 'otherPullUpOff';\n\t\t};\n        /**\n         * Get debouncing period text\n         * @param value value\n         */\n\t\tPulseV30x10Parser.prototype.getDebouncingPeriodText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn '0';\n\t\t\t\tcase 1:\n\t\t\t\t\treturn '1';\n\t\t\t\tcase 2:\n\t\t\t\t\treturn '10';\n\t\t\t\tcase 3:\n\t\t\t\t\treturn '20';\n\t\t\t\tcase 4:\n\t\t\t\t\treturn '50';\n\t\t\t\tcase 5:\n\t\t\t\t\treturn '100';\n\t\t\t\tcase 6:\n\t\t\t\t\treturn '200';\n\t\t\t\tcase 7:\n\t\t\t\t\treturn '500';\n\t\t\t\tcase 8:\n\t\t\t\t\treturn '1000';\n\t\t\t\tcase 9:\n\t\t\t\t\treturn '2000';\n\t\t\t\tcase 10:\n\t\t\t\t\treturn '5000';\n\t\t\t\tcase 11:\n\t\t\t\t\treturn '10000';\n\t\t\t\tdefault:\n\t\t\t\t\treturn '0';\n\t\t\t}\n\t\t};\n\t\treturn PulseV30x10Parser;\n\t}());\n\tcodec.PulseV30x10Parser = PulseV30x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 0x11 (configuration) frame parser\n     */\n\tvar PulseV30x11Parser = /** @class */ (function () {\n\t\tfunction PulseV30x11Parser() {\n\t\t\tthis.deviceType = 'pulse3';\n\t\t\tthis.frameCode = 0x11;\n\t\t}\n\t\tPulseV30x11Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x11 Pulse 3 configuration' };\n\t\t\tvar contentA = {};\n\t\t\tvar contentB = {};\n\t\t\t// Overflow alarm trigger threshold\n\t\t\tcontentA['leakageDetectionOverflowAlarmTriggerThreshold'] = payload.readUInt16BE(2);\n\t\t\tcontentB['leakageDetectionOverflowAlarmTriggerThreshold'] = payload.readUInt16BE(4);\n\t\t\t// Leakage threshold\n\t\t\tcontentA['leakageDetectionThreshold'] = payload.readUInt16BE(6);\n\t\t\tcontentB['leakageDetectionThreshold'] = payload.readUInt16BE(8);\n\t\t\tappContent['channelA'] = contentA;\n\t\t\tappContent['channelB'] = contentB;\n\t\t\treturn appContent;\n\t\t};\n\t\treturn PulseV30x11Parser;\n\t}());\n\tcodec.PulseV30x11Parser = PulseV30x11Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 3 0x12 (configuration) frame parser\n     */\n\tvar PulseV30x12Parser = /** @class */ (function () {\n\t\tfunction PulseV30x12Parser() {\n\t\t\tthis.deviceType = 'pulse3';\n\t\t\tthis.frameCode = 0x12;\n\t\t}\n\t\tPulseV30x12Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x12 Pulse 3 configuration' };\n\t\t\tvar contentA = {};\n\t\t\tvar contentB = {};\n\t\t\tappContent['redundantSamples'] = payload.readUInt8(10);\n\t\t\t// Daily periods below which leakage alarm triggered\n\t\t\tcontentA['leakageDetectionDailyPeriodsBelowWhichLeakageAlarmTriggered']\n\t\t\t\t= payload.readUInt16BE(2);\n\t\t\tcontentB['leakageDetectionDailyPeriodsBelowWhichLeakageAlarmTriggered']\n\t\t\t\t= payload.readUInt16BE(4);\n\t\t\tcontentA['samplePeriodForTamperDetection'] = payload.readUInt8(6);\n\t\t\tcontentA['tamperThreshold'] = payload.readUInt8(7);\n\t\t\tcontentB['samplePeriodForTamperDetection'] = payload.readUInt8(8);\n\t\t\tcontentB['tamperThreshold'] = payload.readUInt8(9);\n\t\t\tappContent['channelA'] = contentA;\n\t\t\tappContent['channelB'] = contentB;\n\t\t\treturn appContent;\n\t\t};\n\t\treturn PulseV30x12Parser;\n\t}());\n\tcodec.PulseV30x12Parser = PulseV30x12Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 3 0x30 (keep alive) frame parser\n     */\n\tvar PulseV30x30Parser = /** @class */ (function () {\n\t\tfunction PulseV30x30Parser() {\n\t\t\tthis.deviceType = 'pulse3';\n\t\t\tthis.frameCode = 0x30;\n\t\t}\n\t\tPulseV30x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x30 Pulse 3 keep alive' };\n\t\t\tvar contentA = {};\n\t\t\tvar contentB = {};\n\t\t\t// Alarm states\n\t\t\tcontentA['flowAlarm'] = Boolean(payload[2] & 0x01);\n\t\t\tcontentB['flowAlarm'] = Boolean(payload[2] & 0x02);\n\t\t\tcontentA['tamperAlarm'] = Boolean(payload[2] & 0x04);\n\t\t\tcontentB['tamperAlarm'] = Boolean(payload[2] & 0x08);\n\t\t\tcontentA['leakageAlarm'] = Boolean(payload[2] & 0x10);\n\t\t\tcontentB['leakageAlarm'] = Boolean(payload[2] & 0x20);\n\t\t\t// Max/min measured flows\n\t\t\tcontentA['last24hMaxFlow'] = payload.readUInt16BE(3);\n\t\t\tcontentB['last24hMaxFlow'] = payload.readUInt16BE(5);\n\t\t\tcontentA['last24hMinFlow'] = payload.readUInt16BE(7);\n\t\t\tcontentB['last24hMinFlow'] = payload.readUInt16BE(9);\n\t\t\tappContent['channelA'] = contentA;\n\t\t\tappContent['channelB'] = contentB;\n\t\t\treturn appContent;\n\t\t};\n\t\treturn PulseV30x30Parser;\n\t}());\n\tcodec.PulseV30x30Parser = PulseV30x30Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 3 0x46 (data) frame parser\n     */\n\tvar PulseV30x46Parser = /** @class */ (function () {\n\t\tfunction PulseV30x46Parser() {\n\t\t\tthis.deviceType = 'pulse3';\n\t\t\tthis.frameCode = 0x46;\n\t\t}\n\t\tPulseV30x46Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x46 Pulse 3 data' };\n\t\t\t// Current indexes [Channel A, Channel B]\n\t\t\tappContent['counterValues'] = [payload.readUInt32BE(2), payload.readUInt32BE(6)];\n\t\t\treturn appContent;\n\t\t};\n\t\treturn PulseV30x46Parser;\n\t}());\n\tcodec.PulseV30x46Parser = PulseV30x46Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 3 0x47 (alarm) frame parser\n     */\n\tvar PulseV30x47Parser = /** @class */ (function () {\n\t\tfunction PulseV30x47Parser() {\n\t\t\tthis.deviceType = 'pulse3';\n\t\t\tthis.frameCode = 0x47;\n\t\t}\n\t\tPulseV30x47Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x47 Pulse 3 alarm' };\n\t\t\t// Flows when overflow occured [Channel A, Channel B]\n\t\t\tappContent['flowValues'] = [payload.readUInt16BE(2), payload.readUInt16BE(4)];\n\t\t\treturn appContent;\n\t\t};\n\t\treturn PulseV30x47Parser;\n\t}());\n\tcodec.PulseV30x47Parser = PulseV30x47Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 3 periodic data  frame parser\n     */\n\tvar PulseV30x5aParser = /** @class */ (function () {\n\t\tfunction PulseV30x5aParser() {\n\t\t\tthis.deviceType = 'pulse3';\n\t\t\tthis.frameCode = 0x5a;\n\t\t}\n\t\tPulseV30x5aParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar absCounterValue = payload.readUInt32BE(2);\n\t\t\tvar appContent = { type: '0x5a Pulse 3 data - channel A' };\n\t\t\tvar values = [absCounterValue];\n\t\t\t// Loop through historic data [t=0, t-1, t-2,...]\n\t\t\tfor (var offset = 6; offset < payload.byteLength; offset += 2) {\n\t\t\t\tabsCounterValue -= payload.readInt16BE(offset);\n\t\t\t\tvalues.push(absCounterValue);\n\t\t\t}\n\t\t\tappContent['counterValues'] = values;\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get reading frequency\n         * @param configuration configuration\n         */\n\t\tPulseV30x5aParser.prototype.getReadingFrequency = function (configuration) {\n\t\t\treturn configuration.byteLength > 0 ? configuration.readUInt16BE(8) * configuration.readUInt16BE(6) * 2 : null;\n\t\t};\n\t\treturn PulseV30x5aParser;\n\t}());\n\tcodec.PulseV30x5aParser = PulseV30x5aParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 3 periodic data frame parser\n     */\n\tvar PulseV30x5bParser = /** @class */ (function () {\n\t\tfunction PulseV30x5bParser() {\n\t\t\tthis.deviceType = 'pulse3';\n\t\t\tthis.frameCode = 0x5b;\n\t\t}\n\t\tPulseV30x5bParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar absCounterValue = payload.readUInt32BE(2);\n\t\t\tvar appContent = { type: '0x5b Pulse 3 data - channel B' };\n\t\t\tvar values = [absCounterValue];\n\t\t\t// Loop through historic data [t=0, t-1, t-2,...]\n\t\t\tfor (var offset = 6; offset < payload.byteLength; offset += 2) {\n\t\t\t\tabsCounterValue -= payload.readInt16BE(offset);\n\t\t\t\tvalues.push(absCounterValue);\n\t\t\t}\n\t\t\tappContent['counterValues'] = values;\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get reading frequency\n         * @param configuration configuration\n         */\n\t\tPulseV30x5bParser.prototype.getReadingFrequency = function (configuration) {\n\t\t\treturn configuration.byteLength > 0 ? configuration.readUInt16BE(8) * configuration.readUInt16BE(6) * 2 : null;\n\t\t};\n\t\treturn PulseV30x5bParser;\n\t}());\n\tcodec.PulseV30x5bParser = PulseV30x5bParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Pulse 3 status byte parser\n     */\n\tvar PulseV3StatusByteParser = /** @class */ (function () {\n\t\tfunction PulseV3StatusByteParser() {\n\t\t\tthis.deviceType = 'pulse3';\n\t\t\tthis.frameCode = -1;\n\t\t}\n\t\tPulseV3StatusByteParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar statusContent = {};\n\t\t\tstatusContent['frameCounter'] = (payload[1] & 0xe0) >> 5;\n\t\t\tstatusContent['hardwareError'] = ((payload[1] & 0x04) !== 0) ? true : false;\n\t\t\tstatusContent['lowBattery'] = ((payload[1] & 0x02) !== 0) ? true : false;\n\t\t\tstatusContent['configurationDone'] = ((payload[1] & 0x01) !== 0) ? true : false;\n\t\t\t// Status byte, applicative flags\n\t\t\tstatusContent['configurationInconsistency'] = ((payload[1] & 0x08) !== 0) ? true : false;\n\t\t\treturn { 'status': statusContent };\n\t\t};\n\t\treturn PulseV3StatusByteParser;\n\t}());\n\tcodec.PulseV3StatusByteParser = PulseV3StatusByteParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n\tvar Repeater0x01InputData = /** @class */ (function () {\n\t\tfunction Repeater0x01InputData() {\n\t\t\t// Accepted values are:\n\t\t\t// 0 retour en mode PARK\n\t\t\t// 1 retour en mode installation auto\n\t\t\t// 2 retour en mode opération, WL vide, rafraichissement de la WL à chaque trame OoB\n\t\t\tthis.return_mode = 0;\n\t\t}\n\t\treturn Repeater0x01InputData;\n\t}());\n\tcodec.Repeater0x01InputData = Repeater0x01InputData;\n    /**\n     * Repeater 0x01 frame builder\n     */\n\tvar Repeater0x01Builder = /** @class */ (function () {\n\t\tfunction Repeater0x01Builder() {\n\t\t\tthis.deviceType = 'repeater';\n\t\t\tthis.frameCode = 0x01;\n\t\t\tthis.inputDataClass = Repeater0x01InputData;\n\t\t}\n\t\tRepeater0x01Builder.prototype.buildFrame = function (inputData, network) {\n\t\t\tvar payload = Buffer.alloc(8);\n\t\t\tpayload[0] = this.frameCode;\n\t\t\tpayload.writeUInt8(inputData.return_mode, 1);\n\t\t\treturn payload;\n\t\t};\n\t\treturn Repeater0x01Builder;\n\t}());\n\tcodec.Repeater0x01Builder = Repeater0x01Builder;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Repeater 0x01 frame parser\n     */\n\tvar Repeater0x01Parser = /** @class */ (function () {\n\t\tfunction Repeater0x01Parser() {\n\t\t\tthis.deviceType = 'repeater';\n\t\t\tthis.frameCode = 0x01;\n\t\t}\n\t\tRepeater0x01Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x01 Repeater WL add' }, this.getDataFromPayload(payload));\n\t\t\treturn appContent;\n\t\t};\n\t\tRepeater0x01Parser.prototype.getDataFromPayload = function (payload) {\n\t\t\tvar appContent = {};\n\t\t\tcodec.RepeaterHelper.getUPStatusFromPayload(payload, appContent);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Repeater0x01Parser;\n\t}());\n\tcodec.Repeater0x01Parser = Repeater0x01Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n\tvar Repeater0x02InputData = /** @class */ (function () {\n\t\tfunction Repeater0x02InputData() {\n\t\t\t// wl_activation accepted values are 0x00 or 0x01\n\t\t\tthis.wl_activation = 0x00;\n\t\t\tthis.id = 0;\n\t\t}\n\t\treturn Repeater0x02InputData;\n\t}());\n\tcodec.Repeater0x02InputData = Repeater0x02InputData;\n    /**\n     * Repeater 0x02 frame builder\n     */\n\tvar Repeater0x02Builder = /** @class */ (function () {\n\t\tfunction Repeater0x02Builder() {\n\t\t\tthis.deviceType = 'repeater';\n\t\t\tthis.frameCode = 0x02;\n\t\t\tthis.inputDataClass = Repeater0x02InputData;\n\t\t}\n\t\tRepeater0x02Builder.prototype.buildFrame = function (inputData, network) {\n\t\t\tvar payload = Buffer.alloc(8);\n\t\t\tpayload[0] = this.frameCode;\n\t\t\tpayload.writeUInt8(inputData.wl_activation, 1);\n\t\t\tpayload.writeUInt32BE(inputData.id, 1);\n\t\t\treturn payload;\n\t\t};\n\t\treturn Repeater0x02Builder;\n\t}());\n\tcodec.Repeater0x02Builder = Repeater0x02Builder;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Repeater 0x02 frame parser\n     */\n\tvar Repeater0x02Parser = /** @class */ (function () {\n\t\tfunction Repeater0x02Parser() {\n\t\t\tthis.deviceType = 'repeater';\n\t\t\tthis.frameCode = 0x02;\n\t\t}\n\t\tRepeater0x02Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x02 Repeater WL modification' }, this.getDataFromPayload(payload));\n\t\t\treturn appContent;\n\t\t};\n\t\tRepeater0x02Parser.prototype.getDataFromPayload = function (payload) {\n\t\t\tvar appContent = {};\n\t\t\tcodec.RepeaterHelper.getUPStatusFromPayload(payload, appContent);\n\t\t\tappContent['number_of_id_in_wl'] = payload.readUInt8(2);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Repeater0x02Parser;\n\t}());\n\tcodec.Repeater0x02Parser = Repeater0x02Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n\tvar Repeater0x03InputData = /** @class */ (function () {\n\t\tfunction Repeater0x03InputData() {\n\t\t\t// wl_validation accepted values are 0x00 or 0x01\n\t\t\tthis.wl_validation = 0x00;\n\t\t\tthis.id = 0;\n\t\t}\n\t\treturn Repeater0x03InputData;\n\t}());\n\tcodec.Repeater0x03InputData = Repeater0x03InputData;\n    /**\n     * Repeater 0x03 frame builder\n     */\n\tvar Repeater0x03Builder = /** @class */ (function () {\n\t\tfunction Repeater0x03Builder() {\n\t\t\tthis.deviceType = 'repeater';\n\t\t\tthis.frameCode = 0x03;\n\t\t\tthis.inputDataClass = Repeater0x03InputData;\n\t\t}\n\t\tRepeater0x03Builder.prototype.buildFrame = function (inputData, network) {\n\t\t\tvar payload = Buffer.alloc(8);\n\t\t\tpayload[0] = this.frameCode;\n\t\t\tpayload.writeUInt8(inputData.wl_validation, 1);\n\t\t\tpayload.writeUInt32BE(inputData.id, 2);\n\t\t\treturn payload;\n\t\t};\n\t\treturn Repeater0x03Builder;\n\t}());\n\tcodec.Repeater0x03Builder = Repeater0x03Builder;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Repeater 0x02 frame parser\n     */\n\tvar Repeater0x03Parser = /** @class */ (function () {\n\t\tfunction Repeater0x03Parser() {\n\t\t\tthis.deviceType = 'repeater';\n\t\t\tthis.frameCode = 0x03;\n\t\t}\n\t\tRepeater0x03Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x03 Repeater DL confirmation' }, this.getDataFromPayload(payload));\n\t\t\treturn appContent;\n\t\t};\n\t\tRepeater0x03Parser.prototype.getDataFromPayload = function (payload) {\n\t\t\tvar appContent = {};\n\t\t\tcodec.RepeaterHelper.getUPStatusFromPayload(payload, appContent);\n\t\t\tappContent['downlink_code'] = codec.RepeaterHelper.getDownlinkDescriptionForCode(payload.readUInt8(2));\n\t\t\tappContent['downlink_error_code'] = codec.RepeaterHelper.getErrorDescriptionForCode(payload.readUInt8(3));\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Repeater0x03Parser;\n\t}());\n\tcodec.Repeater0x03Parser = Repeater0x03Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n\tvar Repeater0x04InputData = /** @class */ (function () {\n\t\tfunction Repeater0x04InputData() {\n\t\t\tthis.S300 = 1; // 01- 31\n\t\t\tthis.S303 = 0; // 00 ou 02\n\t\t\tthis.S304 = 0; // 00/01/02\n\t\t\tthis.S306 = 0; // 00 ou 02\n\t\t}\n\t\treturn Repeater0x04InputData;\n\t}());\n\tcodec.Repeater0x04InputData = Repeater0x04InputData;\n    /**\n     * Repeater 0x04 frame builder\n     */\n\tvar Repeater0x04Builder = /** @class */ (function () {\n\t\tfunction Repeater0x04Builder() {\n\t\t\tthis.deviceType = 'repeater';\n\t\t\tthis.frameCode = 0x04;\n\t\t\tthis.inputDataClass = Repeater0x04InputData;\n\t\t}\n\t\tRepeater0x04Builder.prototype.buildFrame = function (inputData, network) {\n\t\t\tvar payload = Buffer.alloc(8);\n\t\t\tpayload[0] = this.frameCode;\n\t\t\tpayload.writeUInt8(inputData.S300, 1);\n\t\t\tpayload.writeUInt8(inputData.S303, 2);\n\t\t\tpayload.writeUInt8(inputData.S304, 3);\n\t\t\tpayload.writeUInt8(inputData.S306, 4);\n\t\t\treturn payload;\n\t\t};\n\t\tRepeater0x04Builder.prototype.getFirstIds = function (ids) {\n\t\t\treturn ids.filter(function (id) { return id >= 8; });\n\t\t};\n\t\tRepeater0x04Builder.prototype.getLastIds = function (ids) {\n\t\t\treturn ids.filter(function (id) { return id < 8; });\n\t\t};\n\t\tRepeater0x04Builder.prototype.getByteFromIdsList = function (ids) {\n\t\t\tvar intArray = Buffer.alloc(8);\n\t\t\tids.forEach(function (id, idx) { return intArray[idx] = id; });\n\t\t\treturn intArray.readUInt8(0);\n\t\t};\n\t\treturn Repeater0x04Builder;\n\t}());\n\tcodec.Repeater0x04Builder = Repeater0x04Builder;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Repeater 0x04 frame parser\n     */\n\tvar Repeater0x04Parser = /** @class */ (function () {\n\t\tfunction Repeater0x04Parser() {\n\t\t\tthis.deviceType = 'repeater';\n\t\t\tthis.frameCode = 0x04;\n\t\t}\n\t\tRepeater0x04Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x04 White List confirmation' }, this.getDataFromPayload(payload));\n\t\t\treturn appContent;\n\t\t};\n\t\tRepeater0x04Parser.prototype.getDataFromPayload = function (payload) {\n\t\t\tvar appContent = {};\n\t\t\tcodec.RepeaterHelper.getUPStatusFromPayload(payload, appContent);\n\t\t\tappContent['number_of_id_in_wl'] = payload.readUInt8(2);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Repeater0x04Parser;\n\t}());\n\tcodec.Repeater0x04Parser = Repeater0x04Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n\tvar Repeater0x05InputData = /** @class */ (function () {\n\t\tfunction Repeater0x05InputData() {\n\t\t}\n\t\treturn Repeater0x05InputData;\n\t}());\n\tcodec.Repeater0x05InputData = Repeater0x05InputData;\n    /**\n     * Repeater 0x05 frame builder\n     */\n\tvar Repeater0x05Builder = /** @class */ (function () {\n\t\tfunction Repeater0x05Builder() {\n\t\t\tthis.deviceType = 'repeater';\n\t\t\tthis.frameCode = 0x05;\n\t\t\tthis.inputDataClass = Repeater0x05InputData;\n\t\t}\n\t\tRepeater0x05Builder.prototype.buildFrame = function (inputData, network) {\n\t\t\tvar payload = Buffer.alloc(8);\n\t\t\tpayload[0] = this.frameCode;\n\t\t\treturn payload;\n\t\t};\n\t\treturn Repeater0x05Builder;\n\t}());\n\tcodec.Repeater0x05Builder = Repeater0x05Builder;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n\tvar errorCode = {\n\t\t0x00: '0x00 The action has been correctly realized',\n\t\t0x0A: '0x0A Uplink code is invalid',\n\t\t0x0B: '0x0B Harware error, please contact adeunis support',\n\t\t0x0C: '0x0C Callback error',\n\t\t0x0D: '0x0D Generic error',\n\t\t0x01: '0x01 White List already empty',\n\t\t0x02: '0x02 White List not erased',\n\t\t0x03: '0x03 White List is empty, repeater switch into OPERATION with “auto-record” mode',\n\t\t0x04: '0x04 ID not found in the White List',\n\t\t0x05: '0x05 White List is full, “add an ID” not possible',\n\t\t0x06: '0x06 ID already existing in the White List',\n\t\t0x07: '0x07 No ID repeated, repeater stay into OPERATION with “auto-record” mode',\n\t\t0x08: '0x08 A White List is already existing, use “Suppress all IDs from White List” frame before',\n\t\t0x11: '0x11 Error with S300 configuration',\n\t\t0x12: '0x12 Error with S303 configuration',\n\t\t0x13: '0x13 Error with S300, S303 configuration',\n\t\t0x14: '0x14 Error with S304 configuration',\n\t\t0x15: '0x15 Error with S300, S304 configuration',\n\t\t0x16: '0x16 Error with S303, S304 configuration',\n\t\t0x17: '0x17 Error with S300, S303, S304 configuration',\n\t\t0x18: '0x18 Error with S306 configuration',\n\t\t0x19: '0x19 Error with S300, S306 configuration',\n\t\t0x1A: '0x1A Error with S303, S306 configuration',\n\t\t0x1B: '0x1B Error with S300, S303, S306 configuration',\n\t\t0x1C: '0x1C Error with S304, S306 configuration',\n\t\t0x1D: '0x1D Error with S300, S304, S306 configuration',\n\t\t0x1E: '0x1E Error with S303, S304, S306 configuration',\n\t\t0x1F: '0x1F Error with S300, S303, S304, S306 configuration'\n\t};\n\tvar dlCode = {\n\t\t0x01: '0x01 Suppress all IDs from White List',\n\t\t0x02: '0x02 Delete an ID from White List',\n\t\t0x03: '0x03 Add an ID into White List',\n\t\t0x05: '0x05 Freeze the list of devices repeated in auto-record mode into the White List',\n\t\t0x04: '0x04 Modify Repeater configuration'\n\t};\n\tvar RepeaterHelper = /** @class */ (function () {\n\t\tfunction RepeaterHelper() {\n\t\t}\n\t\tRepeaterHelper.hex2bin = function (hex) {\n\t\t\treturn (parseInt(hex, 16).toString(2)).padStart(8, '0');\n\t\t};\n\t\tRepeaterHelper.getUPStatusFromPayload = function (payload, appContent) {\n\t\t\tvar byte = payload[1];\n\t\t\tvar charLb = 1;\n\t\t\tif (/^\\d$/.test('' + byte)) {\n\t\t\t\t// one digit\n\t\t\t\tappContent['frame_counter'] = 0;\n\t\t\t\tcharLb = 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tappContent['frame_counter'] = parseInt(payload.readUInt8(1).toString(16).charAt(0), 16);\n\t\t\t}\n\t\t\tvar hexLb = payload.readUInt8(1).toString(16);\n\t\t\tvar binLb = RepeaterHelper.hex2bin(hexLb);\n\t\t\tvar bitLb = binLb[binLb.length - 1];\n\t\t\tappContent['low_battery'] = (bitLb === '1') ? true : false;\n\t\t\treturn appContent;\n\t\t};\n\t\tRepeaterHelper.getDownlinkDescriptionForCode = function (code) {\n\t\t\treturn dlCode[code] || code;\n\t\t};\n\t\tRepeaterHelper.getErrorDescriptionForCode = function (code) {\n\t\t\treturn errorCode[code] || code;\n\t\t};\n\t\treturn RepeaterHelper;\n\t}());\n\tcodec.RepeaterHelper = RepeaterHelper;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Smart Building 0x1f (TOR configuration) frame parser\n     */\n\tvar Sb0x1fParser = /** @class */ (function () {\n\t\tfunction Sb0x1fParser() {\n\t\t\tthis.deviceType = 'any';\n\t\t\tthis.frameCode = 0x1f;\n\t\t}\n\t\tSb0x1fParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\t// register 380: Configuration TOR1 (button)\n\t\t\t// register 381: Alarm threshold TOR1\n\t\t\t// register 382: Configuration TOR2 (button)\n\t\t\t// register 383: Alarm threshold TOR2\n\t\t\tvar appContent = {\n\t\t\t\ttype: '0x1f Smart Building channels configuration',\n\t\t\t\t'channel1_configuration_type': this.getTypeText(payload[2] & 0x0f),\n\t\t\t\t'channel1_configuration_debounce_duration': this.getDebounceDurationText((payload[2] & 0xf0) >> 4),\n\t\t\t\t'channel1_alarm_threshold': payload.readUInt16BE(3),\n\t\t\t\t'channel2_configuration_type': this.getTypeText(payload[5] & 0x0f),\n\t\t\t\t'channel2_configuration_debounce_duration': this.getDebounceDurationText((payload[5] & 0xf0) >> 4),\n\t\t\t\t'channel2_alarm_threshold': payload.readUInt16BE(6)\n\t\t\t};\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get debounce duration text\n         * @param value value\n         */\n\t\tSb0x1fParser.prototype.getDebounceDurationText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 0x0:\n\t\t\t\t\treturn 'no_debounce';\n\t\t\t\tcase 0x1:\n\t\t\t\t\treturn '10msec';\n\t\t\t\tcase 0x2:\n\t\t\t\t\treturn '20msec';\n\t\t\t\tcase 0x3:\n\t\t\t\t\treturn '50msec';\n\t\t\t\tcase 0x4:\n\t\t\t\t\treturn '100msec';\n\t\t\t\tcase 0x5:\n\t\t\t\t\treturn '200msec';\n\t\t\t\tcase 0x6:\n\t\t\t\t\treturn '500msec';\n\t\t\t\tcase 0x7:\n\t\t\t\t\treturn '1s';\n\t\t\t\tcase 0x8:\n\t\t\t\t\treturn '2s';\n\t\t\t\tcase 0x9:\n\t\t\t\t\treturn '5s';\n\t\t\t\tcase 0xa:\n\t\t\t\t\treturn '10s';\n\t\t\t\tcase 0xb:\n\t\t\t\t\treturn '20s';\n\t\t\t\tcase 0xc:\n\t\t\t\t\treturn '40s';\n\t\t\t\tcase 0xd:\n\t\t\t\t\treturn '60s';\n\t\t\t\tcase 0xe:\n\t\t\t\t\treturn '5min';\n\t\t\t\tcase 0xf:\n\t\t\t\t\treturn '10min';\n\t\t\t\tdefault:\n\t\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n        /**\n         * Get type text\n         * @param value value\n         */\n\t\tSb0x1fParser.prototype.getTypeText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 0x0:\n\t\t\t\t\treturn 'deactivated';\n\t\t\t\tcase 0x1:\n\t\t\t\t\treturn 'event_on';\n\t\t\t\tcase 0x2:\n\t\t\t\t\treturn 'event_off';\n\t\t\t\tcase 0x3:\n\t\t\t\t\treturn 'event_on_off';\n\t\t\t\tdefault:\n\t\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n\t\treturn Sb0x1fParser;\n\t}());\n\tcodec.Sb0x1fParser = Sb0x1fParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Smart Building 0x51 (TOR1 alarm) frame parser\n     */\n\tvar Sb0x51Parser = /** @class */ (function () {\n\t\tfunction Sb0x51Parser() {\n\t\t\tthis.deviceType = 'any';\n\t\t\tthis.frameCode = 0x51;\n\t\t}\n\t\tSb0x51Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({ type: '0x51 Smart Building TOR1 alarm' }, this.getDataFromPayload(payload));\n\t\t\treturn appContent;\n\t\t};\n\t\tSb0x51Parser.prototype.getDataFromPayload = function (payload) {\n\t\t\tvar appContent = {};\n\t\t\tappContent['alarm_status_tor_previous_frame'] = payload.readUInt8(2) >> 1 & 1;\n\t\t\tappContent['alarm_status_tor_current'] = payload.readUInt8(2) >> 0 & 1;\n\t\t\tappContent['global_digital_counter'] = payload.readUInt32BE(3);\n\t\t\tappContent['instantaneous_digital_counter'] = payload.readUInt16BE(7);\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Sb0x51Parser;\n\t}());\n\tcodec.Sb0x51Parser = Sb0x51Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Smart Building 0x52 (TOR2 alarm) frame parser\n     */\n\tvar Sb0x52Parser = /** @class */ (function () {\n\t\tfunction Sb0x52Parser() {\n\t\t\tthis.deviceType = 'any';\n\t\t\tthis.frameCode = 0x52;\n\t\t\tthis.sb0x51Parser = new codec.Sb0x51Parser();\n\t\t}\n\t\tSb0x52Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = __assign({}, this.sb0x51Parser.parseFrame(payload, configuration, network), { type: '0x52 Smart Building TOR2 alarm' });\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Sb0x52Parser;\n\t}());\n\tcodec.Sb0x52Parser = Sb0x52Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temperature 0x10 (configuration) frame parser\n     */\n\tvar Temp0x10Parser = /** @class */ (function () {\n\t\tfunction Temp0x10Parser() {\n\t\t\tthis.deviceType = 'temp';\n\t\t\tthis.frameCode = 0x10;\n\t\t}\n\t\tTemp0x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x10 Temperature configuration' };\n\t\t\tif (payload[8] === 2) {\n\t\t\t\t// TEST mode => period = value * 20sec\n\t\t\t\tappContent['transmission_period_keep_alive_sec'] = payload[2] * 20;\n\t\t\t\tappContent['transmission_period_data_sec'] = payload[3] * 20;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// PRODUCTION mode => period = value * 10min\n\t\t\t\tappContent['transmission_period_keep_alive_min'] = payload[2] * 10;\n\t\t\t\tappContent['transmission_period_data_min'] = payload[3] * 10;\n\t\t\t}\n\t\t\t// Internal sensor general configuration\n\t\t\tappContent['ambient_probe_id'] = payload[4];\n\t\t\tappContent['ambient_probe_threshold_triggering'] = this.getThresholdTriggeringText(payload[5] & 0x03);\n\t\t\t// External sensor general configuration\n\t\t\tappContent['remote_probe_id'] = payload[6];\n\t\t\tappContent['remote_probe_threshold_triggering'] = this.getThresholdTriggeringText(payload[7] & 0x03);\n\t\t\t// Product mode\n\t\t\tappContent['product_mode'] = codec.PlateformCommonUtils.getProductModeText(payload[8]);\n\t\t\t// ?\n\t\t\tappContent['sensors_activation'] = payload[9];\n\t\t\tif (payload[8] === 2) {\n\t\t\t\t// TEST mode => period = value * 20sec\n\t\t\t\tappContent['acquisition_period_sec'] = payload[10] * 20;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// PRODUCTION mode => period = value * 10min\n\t\t\t\tappContent['acquisition_period_min'] = payload[10] * 10;\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get Threshold Triggering text\n         * @param value value\n         */\n\t\tTemp0x10Parser.prototype.getThresholdTriggeringText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn 'none';\n\t\t\t\tcase 1:\n\t\t\t\t\treturn 'low_only';\n\t\t\t\tcase 2:\n\t\t\t\t\treturn 'high_only';\n\t\t\t\tcase 3:\n\t\t\t\t\treturn 'low_and_high';\n\t\t\t\tdefault:\n\t\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n\t\treturn Temp0x10Parser;\n\t}());\n\tcodec.Temp0x10Parser = Temp0x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temperature 0x11 (configuration) frame parser\n     */\n\tvar Temp0x11Parser = /** @class */ (function () {\n\t\tfunction Temp0x11Parser() {\n\t\t\tthis.deviceType = 'temp';\n\t\t\tthis.frameCode = 0x11;\n\t\t}\n\t\tTemp0x11Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x11 Temperature configuration' };\n\t\t\t// Internal sensor high threshold configuration\n\t\t\tappContent['ambient_probe_high_threshold_value'] = payload.readUInt16BE(2) / 10;\n\t\t\tappContent['ambient_probe_high_threshold_hysteresis'] = payload[4] / 10;\n\t\t\t// Internal sensor low threshold configuration\n\t\t\tappContent['ambient_probe_low_threshold_value'] = payload.readUInt16BE(5) / 10;\n\t\t\tappContent['ambient_probe_low_threshold_hysteresis'] = payload[7] / 10;\n\t\t\t// ?\n\t\t\tappContent['super_sampling_factor'] = payload[8];\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Temp0x11Parser;\n\t}());\n\tcodec.Temp0x11Parser = Temp0x11Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temperature 0x12 (configuration) frame parser\n     */\n\tvar Temp0x12Parser = /** @class */ (function () {\n\t\tfunction Temp0x12Parser() {\n\t\t\tthis.deviceType = 'temp';\n\t\t\tthis.frameCode = 0x12;\n\t\t}\n\t\tTemp0x12Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x12 Temperature configuration' };\n\t\t\t// External sensor high threshold configuration\n\t\t\tappContent['remote_probe_high_threshold_value'] = payload.readUInt16BE(2) / 10;\n\t\t\tappContent['remote_probe_high_threshold_hysteresis'] = payload[4] / 10;\n\t\t\t// External sensor low threshold configuration\n\t\t\tappContent['remote_probe_low_threshold_value'] = payload.readUInt16BE(5) / 10;\n\t\t\tappContent['remote_probe_low_threshold_hysteresis'] = payload[7] / 10;\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Temp0x12Parser;\n\t}());\n\tcodec.Temp0x12Parser = Temp0x12Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temperature 0x30 (keep alive) frame parser\n     */\n\tvar Temp0x30Parser = /** @class */ (function () {\n\t\tfunction Temp0x30Parser() {\n\t\t\tthis.deviceType = 'temp';\n\t\t\tthis.frameCode = 0x30;\n\t\t\tthis.temp0x43Parser = new codec.Temp0x43Parser();\n\t\t}\n\t\tTemp0x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = this.temp0x43Parser.parseFrame(payload, configuration, network);\n\t\t\tappContent['type'] = '0x30 Temperature keep alive';\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Temp0x30Parser;\n\t}());\n\tcodec.Temp0x30Parser = Temp0x30Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temperature 0x43 (data) frame parser\n     */\n\tvar Temp0x43Parser = /** @class */ (function () {\n\t\tfunction Temp0x43Parser() {\n\t\t\tthis.deviceType = 'temp';\n\t\t\tthis.frameCode = 0x43;\n\t\t}\n\t\tTemp0x43Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x43 Temperature data' };\n\t\t\t// Internal sensor input states\n\t\t\tappContent['ambient_probe_id'] = (payload[2] & 0xf0) >> 4;\n\t\t\tvar rawInternalValue = payload.readInt16BE(3);\n\t\t\tif (rawInternalValue === -32768 /*0x8000*/) {\n\t\t\t\tappContent['ambient_probe_defect'] = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// value in °C = frame value / 10\n\t\t\t\tappContent['ambient_temperature_celsius_degrees'] = rawInternalValue / 10;\n\t\t\t}\n\t\t\t// External sensor input states\n\t\t\tappContent['remote_probe_id'] = (payload[5] & 0xf0) >> 4;\n\t\t\tvar rawExternalValue = payload.readInt16BE(6);\n\t\t\tif (rawExternalValue === -32768 /*0x8000*/) {\n\t\t\t\tappContent['remote_probe_defect'] = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// value in °C = frame value / 10\n\t\t\t\tappContent['remote_temperature_celsius_degrees'] = rawExternalValue / 10;\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n\t\treturn Temp0x43Parser;\n\t}());\n\tcodec.Temp0x43Parser = Temp0x43Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temperature status byte parser\n     */\n\tvar TempStatusByteParser = /** @class */ (function () {\n\t\tfunction TempStatusByteParser() {\n\t\t\tthis.deviceType = 'temp';\n\t\t\tthis.frameCode = -1;\n\t\t}\n\t\tTempStatusByteParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar statusContent = {};\n\t\t\t// Status byte, applicative flags\n\t\t\tstatusContent['ambient_probe_alarm'] = ((payload[1] & 0x08) !== 0) ? true : false;\n\t\t\tstatusContent['remote_probe_alarm'] = ((payload[1] & 0x10) !== 0) ? true : false;\n\t\t\treturn statusContent;\n\t\t};\n\t\treturn TempStatusByteParser;\n\t}());\n\tcodec.TempStatusByteParser = TempStatusByteParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temp 3 0x10 (configuration) frame parser\n     */\n\tvar TempV30x10Parser = /** @class */ (function () {\n\t\tfunction TempV30x10Parser() {\n\t\t\tthis.deviceType = 'temp3';\n\t\t\tthis.frameCode = 0x10;\n\t\t}\n\t\tTempV30x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x10 Temp 3 configuration' };\n\t\t\tappContent['transmissionPeriodKeepAlive'] = { 'unit': 's', 'value': payload.readUInt16BE(2) },\n\t\t\t\tappContent['numberOfHistorizationBeforeSending'] = payload.readUInt16BE(4),\n\t\t\t\tappContent['numberOfSamplingBeforeHistorization'] = payload.readUInt16BE(6),\n\t\t\t\tappContent['samplingPeriod'] = { 'unit': 's', 'value': payload.readUInt16BE(8) * 2 },\n\t\t\t\tappContent['redundantSamples'] = payload.readUInt8(10),\n\t\t\t\tappContent['calculatedPeriodRecording'] = {\n\t\t\t\t\t'unit': 's',\n\t\t\t\t\t'value': payload.readUInt16BE(8) * payload.readUInt16BE(6) * 2\n\t\t\t\t},\n\t\t\t\tappContent['calculatedSendingPeriod'] = {\n\t\t\t\t\t'unit': 's',\n\t\t\t\t\t'value': payload.readUInt16BE(8) * payload.readUInt16BE(6) * payload.readUInt16BE(4) * 2\n\t\t\t\t};\n\t\t\treturn appContent;\n\t\t};\n\t\treturn TempV30x10Parser;\n\t}());\n\tcodec.TempV30x10Parser = TempV30x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temp 3 0x30 (keep alive) frame parser\n     */\n\tvar TempV30x30Parser = /** @class */ (function () {\n\t\tfunction TempV30x30Parser() {\n\t\t\tthis.deviceType = 'temp3';\n\t\t\tthis.frameCode = 0x30;\n\t\t}\n\t\tTempV30x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x30 Temp 3 keep alive' };\n\t\t\tvar nbSensors = (payload[1] & 0x10) ? 2 : 1;\n\t\t\tappContent['temperature'] = { 'unit': '°C', 'value': payload.readInt16BE(2) / 10 };\n\t\t\tif (nbSensors === 2) {\n\t\t\t\tappContent['temperature2'] = { 'unit': '°C', 'value': payload.readInt16BE(4) / 10 };\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n\t\treturn TempV30x30Parser;\n\t}());\n\tcodec.TempV30x30Parser = TempV30x30Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temp 3 0x57 (data) frame parser\n     */\n\tvar TempV30x57Parser = /** @class */ (function () {\n\t\tfunction TempV30x57Parser() {\n\t\t\tthis.deviceType = 'temp3';\n\t\t\tthis.frameCode = 0x57;\n\t\t}\n\t\tTempV30x57Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x57 Temp 3 periodic data' };\n\t\t\tvar nbSensors = (payload[1] & 0x10) ? 2 : 1;\n\t\t\tvar rawValue;\n\t\t\tvar ch1Temp = [], ch2Temp = [];\n\t\t\t// Loop through historic data [t=0, t-1, t-2,...]\n\t\t\tfor (var offset = 2; offset < payload.byteLength; offset += 2 * nbSensors) {\n\t\t\t\trawValue = payload.readInt16BE(offset);\n\t\t\t\tch1Temp.push(rawValue / 10);\n\t\t\t\tif (nbSensors === 2) {\n\t\t\t\t\trawValue = payload.readInt16BE(offset + 2);\n\t\t\t\t\tch2Temp.push(rawValue / 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\tappContent['temperatures'] = { 'unit': '°C', 'values': ch1Temp };\n\t\t\tif (nbSensors === 2) {\n\t\t\t\tappContent['temperatures2'] = { 'unit': '°C', 'values': ch2Temp };\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n\t\treturn TempV30x57Parser;\n\t}());\n\tcodec.TempV30x57Parser = TempV30x57Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temp 3 0x58 (alarm) frame parser\n     */\n\tvar TempV30x58Parser = /** @class */ (function () {\n\t\tfunction TempV30x58Parser() {\n\t\t\tthis.deviceType = 'temp3';\n\t\t\tthis.frameCode = 0x58;\n\t\t}\n\t\tTempV30x58Parser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar appContent = { type: '0x58 Temp 3 alarm' };\n\t\t\tvar nbSensors = (payload[1] & 0x10) ? 2 : 1;\n\t\t\tappContent['alarmTemperature'] = {\n\t\t\t\t'alarmStatus': this.getAlarmStatusText(payload.readUInt8(2)),\n\t\t\t\t'temperature': { 'unit': '°C', 'value': payload.readInt16BE(3) / 10 }\n\t\t\t};\n\t\t\tif (nbSensors === 2) {\n\t\t\t\tappContent['alarmTemperature2'] = {\n\t\t\t\t\t'alarmStatus': this.getAlarmStatusText(payload.readUInt8(5)),\n\t\t\t\t\t'temperature': { 'unit': '°C', 'value': payload.readInt16BE(6) / 10 }\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn appContent;\n\t\t};\n        /**\n         * Get Alarm status text\n         * @param value value\n         */\n\t\tTempV30x58Parser.prototype.getAlarmStatusText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 1:\n\t\t\t\t\treturn 'highThreshold';\n\t\t\t\tcase 2:\n\t\t\t\t\treturn 'lowThreshold';\n\t\t\t\tdefault:\n\t\t\t\t\treturn 'none';\n\t\t\t}\n\t\t};\n\t\treturn TempV30x58Parser;\n\t}());\n\tcodec.TempV30x58Parser = TempV30x58Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    /**\n     * Temp 3 status byte parser\n     */\n\tvar TempV3StatusByteParser = /** @class */ (function () {\n\t\tfunction TempV3StatusByteParser() {\n\t\t\tthis.deviceType = 'temp3';\n\t\t\tthis.frameCode = -1;\n\t\t}\n\t\tTempV3StatusByteParser.prototype.parseFrame = function (payload, configuration, network) {\n\t\t\tvar statusContent = {};\n\t\t\tstatusContent['frameCounter'] = (payload[1] & 0xe0) >> 5;\n\t\t\tstatusContent['hardwareError'] = ((payload[1] & 0x04) !== 0) ? true : false;\n\t\t\tstatusContent['lowBattery'] = ((payload[1] & 0x02) !== 0) ? true : false;\n\t\t\tstatusContent['configurationDone'] = ((payload[1] & 0x01) !== 0) ? true : false;\n\t\t\t// Status byte, applicative flags\n\t\t\tstatusContent['configurationInconsistency'] = ((payload[1] & 0x08) !== 0) ? true : false;\n\t\t\tstatusContent['configuration2ChannelsActivated'] = ((payload[1] & 0x10) !== 0) ? true : false;\n\t\t\treturn { 'status': statusContent };\n\t\t};\n\t\treturn TempV3StatusByteParser;\n\t}());\n\tcodec.TempV3StatusByteParser = TempV3StatusByteParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n\tvar PartialDecodingReason;\n\t(function (PartialDecodingReason) {\n\t\tPartialDecodingReason[PartialDecodingReason[\"NONE\"] = 0] = \"NONE\";\n\t\tPartialDecodingReason[PartialDecodingReason[\"MISSING_NETWORK\"] = 1] = \"MISSING_NETWORK\";\n\t\tPartialDecodingReason[PartialDecodingReason[\"MISSING_CONFIGURATION\"] = 2] = \"MISSING_CONFIGURATION\";\n\t})(PartialDecodingReason = codec.PartialDecodingReason || (codec.PartialDecodingReason = {}));\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n\tvar ContentImpl = /** @class */ (function () {\n\t\tfunction ContentImpl(type) {\n\t\t\tif (type === void 0) { type = 'Unknown'; }\n\t\t\tthis.type = type;\n\t\t\tthis.partialDecoding = codec.PartialDecodingReason.NONE;\n\t\t}\n\t\tContentImpl.merge = function () {\n\t\t\tvar contents = [];\n\t\t\tfor (var _i = 0; _i < arguments.length; _i++) {\n\t\t\t\tcontents[_i] = arguments[_i];\n\t\t\t}\n\t\t\tif (!contents || contents.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn Object.assign.apply(Object, [new ContentImpl(contents[0].type)].concat(contents));\n\t\t};\n\t\tContentImpl.prototype.merge = function () {\n\t\t\tvar contents = [];\n\t\t\tfor (var _i = 0; _i < arguments.length; _i++) {\n\t\t\t\tcontents[_i] = arguments[_i];\n\t\t\t}\n\t\t\treturn ContentImpl.merge.apply(ContentImpl, [this].concat(contents));\n\t\t};\n\t\treturn ContentImpl;\n\t}());\n\tcodec.ContentImpl = ContentImpl;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n\tvar PlateformCommonUtils = /** @class */ (function () {\n\t\tfunction PlateformCommonUtils() {\n\t\t}\n        /**\n         * Get Product Mode text\n         * @param value value\n         */\n\t\tPlateformCommonUtils.getProductModeText = function (value) {\n\t\t\tswitch (value) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn 'PARK';\n\t\t\t\tcase 1:\n\t\t\t\t\treturn 'PRODUCTION';\n\t\t\t\tcase 2:\n\t\t\t\t\treturn 'TEST';\n\t\t\t\tcase 3:\n\t\t\t\t\treturn 'DEAD';\n\t\t\t\tdefault:\n\t\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n\t\treturn PlateformCommonUtils;\n\t}());\n\tcodec.PlateformCommonUtils = PlateformCommonUtils;\n})(codec || (codec = {}));\n//# sourceMappingURL=lib.js.map\n\n\n//*****************************************************************************\n// Javascript codec functions for Adeunis Temp endpoints\n// Authors: Didier Donsez, Vivien Quéma\n// Licence: EPL 1.0\n//*****************************************************************************\n\nif (typeof global.codec === 'undefined') {\n\tglobal.codec = codec;\n}\n\nvar d = new global.codec.Decoder();\n\nvar AdeunisRF_All_Payload = {\n\n\t'decodeUp': function (port, payload) {\n\t\treturn d.decode(payload.toString('hex'));\n\t},\n\n\t// encodes the given object into an array of bytes\n\t'encodeDn': function (port, value) {\n\t\t// TO BE IMPLEMENTED\n\t\treturn null;\n\t}\n}\n\n// module.exports.Decoder = AdeunisRF_All_Payload;\n// console.log(AdeunisRF_All_Payload.decodeUp(1, Buffer.from('43400100ac0100ae', 'hex')));\n\nvar p = msg.payload;\n\nif(! p.applicationName.startsWith(\"ADEUNIS\")) {\n    return undefined;\n}\n\nif(! p.data) {\n    return undefined;\n}\n\nvar o = AdeunisRF_All_Payload.decodeUp(p.fPort,p.frmPayload);\n\nmsg.payload.object = o;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 460,
        "wires": [
            [
                "c5bc3503.79869",
                "570ac4e4.947c74"
            ]
        ]
    }
]